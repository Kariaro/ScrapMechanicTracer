"sm": {
    "raycastResult": {
        [userdata] getBody( Fuzzed is NULL ),
        [userdata] getShape( Fuzzed is NULL ),
        [userdata] getCharacter( Fuzzed is NULL ),
        [userdata] getJoint( Raycastresult ) args:1,
        [userdata] getLiftData( Fuzzed is NULL ),
        [userdata] getHarvestable( Raycastresult ) args:1,
        [userdata] getAreaTrigger( Raycastresult ) args:1,
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
    },
    "shape": {
        function getId( Fuzzed is NULL ),
        function getShapeUuid( Fuzzed is NULL ),
        function getColor( Shape ) args:1,
        function setColor( Fuzzed is NULL ),
        function getMass( Shape ) args:1,
        function getBuoyancy( Fuzzed is NULL ),
        function getMaterial( Shape ) args:1,
        function getWorldPosition( Fuzzed is NULL ),
        function getLocalPosition( Fuzzed is NULL ),
        function getVelocity( Fuzzed is NULL ),
        function getXAxis( Fuzzed is NULL ),
        function getYAxis( Fuzzed is NULL ),
        function getZAxis( Fuzzed is NULL ),
        function getAt( Shape ) args:1,
        function getRight( Shape ) args:1,
        function getUp( Shape ) args:1,
        function transformPoint( Fuzzed is NULL ),
        function transformLocalPoint( Shape, Vec3 ) args:2,
        function transformRotation( Fuzzed is NULL ),
        function getBoundingBox( Fuzzed is NULL ),
        function getBody( Fuzzed is NULL ),
        function getInteractable( Shape ) args:1,
        function destroyPart( Fuzzed is NULL ),
        function getWorldRotation( Fuzzed is NULL ),
        function createPart( Fuzzed is NULL ),
        function createBlock( Fuzzed is NULL ),
        function createJoint( Fuzzed is NULL ),
        function getMaterialId( Fuzzed is NULL ),
        function getIsHarvest( Fuzzed is NULL ),
        function getIsStackable( Fuzzed is NULL ),
        function getShapeTypeColor( Uuid ) args:1,
        function destroyShape( Shape, Integer ) min:1 max:2,
        function getShapeTitle( Fuzzed is NULL ),
        function getShapeDescription( Fuzzed is NULL ),
        function getShapeIcon( Fuzzed is NULL ),
        function shapeExists( Fuzzed is NULL ),
        function shapesInSphere( Fuzzed is NULL ),
        function getNeighbours( Shape ) args:1,
        function getPipedNeighbours( Fuzzed is NULL ),
        [userdata] getId( Fuzzed is NULL ),
        [userdata] getShapeUuid( Fuzzed is NULL ),
        [userdata] getColor( Shape ) args:1,
        [userdata] setColor( Fuzzed is NULL ),
        [userdata] getMass( Fuzzed is NULL ),
        [userdata] getBuoyancy( Fuzzed is NULL ),
        [userdata] getMaterial( Fuzzed is NULL ),
        [userdata] getWorldPosition( Fuzzed is NULL ),
        [userdata] getLocalPosition( Fuzzed is NULL ),
        [userdata] getVelocity( Fuzzed is NULL ),
        [userdata] getXAxis( Fuzzed is NULL ),
        [userdata] getYAxis( Fuzzed is NULL ),
        [userdata] getZAxis( Fuzzed is NULL ),
        [userdata] getAt( Fuzzed is NULL ),
        [userdata] getRight( Fuzzed is NULL ),
        [userdata] getUp( Shape ) args:1,
        [userdata] transformPoint( Shape, Vec3 ) args:2,
        [userdata] transformLocalPoint( Fuzzed is NULL ),
        [userdata] transformRotation( Fuzzed is NULL ),
        [userdata] getBoundingBox( Fuzzed is NULL ),
        [userdata] getBody( Fuzzed is NULL ),
        [userdata] getInteractable( Fuzzed is NULL ),
        [userdata] destroyPart( Fuzzed is NULL ),
        [userdata] getWorldRotation( Fuzzed is NULL ),
        [userdata] createJoint( Fuzzed is NULL ),
        [userdata] getMaterialId( Shape ) args:1,
        [userdata] getIsHarvest( Fuzzed is NULL ),
        [userdata] getIsStackable( Fuzzed is NULL ),
        [userdata] destroyShape( Fuzzed is NULL ),
        [userdata] destroyBlock( Shape, Vec3, Vec3, Integer ) min:2 max:4,
        [userdata] getClosestBlockLocalPosition( Shape, Vec3 ) args:2,
        [userdata] shapeExists( Fuzzed is NULL ),
        [userdata] shapesInSphere( Fuzzed is NULL ),
        [userdata] getNeighbours( Shape ) args:1,
        [userdata] getPipedNeighbours( Fuzzed is NULL ),
        [userdata] replaceShape( Shape, Uuid ) args:2,
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( ---, String ) args:2,
        [userdata] __eq( Fuzzed is NULL ),
    },
    "body": {
        function getId( Fuzzed is NULL ),
        function getCreationId( Fuzzed is NULL ),
        function getMass( Fuzzed is NULL ),
        function getWorldPosition( Fuzzed is NULL ),
        function getVelocity( Fuzzed is NULL ),
        function getAngularVelocity( Fuzzed is NULL ),
        function getShapes( Fuzzed is NULL ),
        function getCreationShapes( Fuzzed is NULL ),
        function getCreationBodies( Fuzzed is NULL ),
        function getCreationsFromBodies( Fuzzed is NULL ),
        function hasChanged( Fuzzed is NULL ),
        function getAllBodies( ) args:0,
        function createBody( Fuzzed is NULL ),
        function getWorldRotation( Fuzzed is NULL ),
        function getCenterOfMassPosition( Body ) args:1,
        function detachDisconnectedShapes( Body ) args:1,
        function convertToDynamic( Fuzzed is NULL ),
        function convertToStatic( Fuzzed is NULL ),
        function isDynamic( Fuzzed is NULL ),
        function isStatic( Body ) args:1,
        function isOnLift( Fuzzed is NULL ),
        function isDestructable( Fuzzed is NULL ),
        function setDestructable( Fuzzed is NULL ),
        function isBuildable( Body ) args:1,
        function setBuildable( Fuzzed is NULL ),
        function isPaintable( Fuzzed is NULL ),
        function setPaintable( Body, [Number, Boolean] ) args:2,
        function isConnectable( Body ) args:1,
        function setConnectable( Body, [Number, Boolean] ) args:2,
        function isLiftable( Fuzzed is NULL ),
        function setLiftable( Fuzzed is NULL ),
        function isUsable( Body ) args:1,
        function setUsable( Fuzzed is NULL ),
        function isErasable( Body ) args:1,
        function setErasable( Body, [Number, Boolean] ) args:2,
        function isConvertibleToDynamic( Body ) args:1,
        function setConvertibleToDynamic( Fuzzed is NULL ),
        [userdata] getId( Fuzzed is NULL ),
        [userdata] getCreationId( Fuzzed is NULL ),
        [userdata] getMass( Body ) args:1,
        [userdata] getWorldPosition( Fuzzed is NULL ),
        [userdata] getVelocity( Fuzzed is NULL ),
        [userdata] getAngularVelocity( Fuzzed is NULL ),
        [userdata] getShapes( Fuzzed is NULL ),
        [userdata] getCreationShapes( Fuzzed is NULL ),
        [userdata] getCreationBodies( Fuzzed is NULL ),
        [userdata] createPart( Fuzzed is NULL ),
        [userdata] createBlock( Fuzzed is NULL ),
        [userdata] hasChanged( Body, Integer ) args:2,
        [userdata] isDynamic( Fuzzed is NULL ),
        [userdata] isStatic( Fuzzed is NULL ),
        [userdata] isOnLift( Fuzzed is NULL ),
        [userdata] isDestructable( Body ) args:1,
        [userdata] setDestructable( Body, [Number, Boolean] ) args:2,
        [userdata] isBuildable( Fuzzed is NULL ),
        [userdata] setBuildable( Fuzzed is NULL ),
        [userdata] isPaintable( Body ) args:1,
        [userdata] setPaintable( Fuzzed is NULL ),
        [userdata] isConnectable( Fuzzed is NULL ),
        [userdata] setConnectable( Fuzzed is NULL ),
        [userdata] isLiftable( Fuzzed is NULL ),
        [userdata] setLiftable( Fuzzed is NULL ),
        [userdata] isUsable( Fuzzed is NULL ),
        [userdata] setUsable( Fuzzed is NULL ),
        [userdata] isErasable( Fuzzed is NULL ),
        [userdata] setErasable( Body, [Number, Boolean] ) args:2,
        [userdata] isConvertibleToDynamic( Fuzzed is NULL ),
        [userdata] setConvertibleToDynamic( Body, [Number, Boolean] ) args:2,
        [userdata] getAllSeatedCharacter( Fuzzed is NULL ),
        [userdata] getCenterOfMassPosition( Fuzzed is NULL ),
        [userdata] getWorld( Fuzzed is NULL ),
        [userdata] getLocalAabb( Fuzzed is NULL ),
        [userdata] getWorldAabb( Body ) args:1,
        [userdata] transformPoint( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Body, Body ) args:2,
    },
    "interactable": {
        function getId( Fuzzed is NULL ),
        function getType( Interactable ) args:1,
        function getColorNormal( Fuzzed is NULL ),
        function getColorHighlight( Fuzzed is NULL ),
        function getMaxParentCount( Interactable ) args:1,
        function getMaxChildCount( Fuzzed is NULL ),
        function isActive( Fuzzed is NULL ),
        function setActive( Interactable, [Number, Boolean] ) args:2,
        function getPower( Fuzzed is NULL ),
        function setPower( Fuzzed is NULL ),
        function getPublicData( Fuzzed is NULL ),
        function setPublicData( Interactable, Table ) args:2,
        function getShape( Fuzzed is NULL ),
        function getConnectionInputType( Fuzzed is NULL ),
        function getConnectionOutputType( Fuzzed is NULL ),
        function getBody( Interactable ) args:1,
        function getSingleParent( Fuzzed is NULL ),
        function getParents( Interactable, Integer ) min:1 max:2,
        function getChildren( Interactable, Integer ) min:1 max:2,
        function getJoints( Fuzzed is NULL ),
        function getBearings( Fuzzed is NULL ),
        function getPistons( Fuzzed is NULL ),
        function getPoseWeight( Fuzzed is NULL ),
        function setPoseWeight( Fuzzed is NULL ),
        function getGlowMultiplier( Fuzzed is NULL ),
        function setGlowMultiplier( Fuzzed is NULL ),
        function getUvFrameIndex( Fuzzed is NULL ),
        function setUvFrameIndex( Interactable, Integer ) args:2,
        function hasAnim( Interactable, String ) args:2,
        function setAnimProgress( Interactable, ---, [Number, String] ) args:3,
        function setAnimEnabled( Fuzzed is NULL ),
        function getAnimDuration( Interactable, String ) args:2,
        function getLocalBonePosition( Fuzzed is NULL ),
        function getWorldBonePosition( Interactable, String ) args:2,
        function getContainer( Fuzzed is NULL ),
        function connect( Fuzzed is NULL ),
        function disconnect( Fuzzed is NULL ),
        function addContainer( Fuzzed is NULL ),
        function removeContainer( Fuzzed is NULL ),
        function setParams( Fuzzed is NULL ),
        [userdata] getId( Fuzzed is NULL ),
        [userdata] getType( Interactable ) args:1,
        [userdata] getColorNormal( Fuzzed is NULL ),
        [userdata] getColorHighlight( Interactable ) args:1,
        [userdata] getMaxParentCount( Interactable ) args:1,
        [userdata] getMaxChildCount( Fuzzed is NULL ),
        [userdata] isActive( Interactable ) args:1,
        [userdata] setActive( Interactable, [Number, Boolean] ) args:2,
        [userdata] getPower( Interactable ) args:1,
        [userdata] setPower( Fuzzed is NULL ),
        [userdata] getPublicData( Interactable ) args:1,
        [userdata] setPublicData( Fuzzed is NULL ),
        [userdata] hasOutputType( Fuzzed is NULL ),
        [userdata] getShape( Interactable ) args:1,
        [userdata] getConnectionInputType( Interactable ) args:1,
        [userdata] getConnectionOutputType( Fuzzed is NULL ),
        [userdata] getBody( Fuzzed is NULL ),
        [userdata] getSingleParent( Fuzzed is NULL ),
        [userdata] getParents( Fuzzed is NULL ),
        [userdata] getChildren( Fuzzed is NULL ),
        [userdata] getJoints( Fuzzed is NULL ),
        [userdata] getBearings( Fuzzed is NULL ),
        [userdata] getPistons( Fuzzed is NULL ),
        [userdata] getPoseWeight( Fuzzed is NULL ),
        [userdata] setPoseWeight( Fuzzed is NULL ),
        [userdata] getGlowMultiplier( Fuzzed is NULL ),
        [userdata] setGlowMultiplier( Fuzzed is NULL ),
        [userdata] getUvFrameIndex( Interactable ) args:1,
        [userdata] setUvFrameIndex( Fuzzed is NULL ),
        [userdata] hasAnim( Fuzzed is NULL ),
        [userdata] setAnimProgress( Fuzzed is NULL ),
        [userdata] setAnimEnabled( Fuzzed is NULL ),
        [userdata] getAnimDuration( Fuzzed is NULL ),
        [userdata] getLocalBonePosition( Fuzzed is NULL ),
        [userdata] getWorldBonePosition( Fuzzed is NULL ),
        [userdata] getContainer( Fuzzed is NULL ),
        [userdata] connect( Fuzzed is NULL ),
        [userdata] disconnect( Fuzzed is NULL ),
        [userdata] connectToJoint( Fuzzed is NULL ),
        [userdata] addContainer( Fuzzed is NULL ),
        [userdata] removeContainer( Fuzzed is NULL ),
        [userdata] setParams( Fuzzed is NULL ),
        [userdata] hasSeat( Fuzzed is NULL ),
        [userdata] setSeatCharacter( Fuzzed is NULL ),
        [userdata] getSeatCharacter( Fuzzed is NULL ),
        [userdata] getSeatInteractables( Fuzzed is NULL ),
        [userdata] pressSeatInteractable( Interactable, Integer ) args:2,
        [userdata] releaseSeatInteractable( Fuzzed is NULL ),
        [userdata] hasSteering( Interactable ) args:1,
        [userdata] setSteeringFlag( Interactable, Integer ) args:2,
        [userdata] unsetSteeringFlag( Fuzzed is NULL ),
        [userdata] getSteeringPower( Fuzzed is NULL ),
        [userdata] getSteeringAngle( Interactable ) args:1,
        [userdata] getSteeringJointLeftAngleSpeed( Fuzzed is NULL ),
        [userdata] getSteeringJointRightAngleSpeed( Fuzzed is NULL ),
        [userdata] getSteeringJointLeftAngleLimit( Fuzzed is NULL ),
        [userdata] getSteeringJointRightAngleLimit( Fuzzed is NULL ),
        [userdata] getSteeringJointUnlocked( Fuzzed is NULL ),
        [userdata] getSteeringJointSettings( Fuzzed is NULL ),
        [userdata] setSteeringJointLeftAngleSpeed( Interactable, Joint, [Number, String] ) args:3,
        [userdata] setSteeringJointRightAngleSpeed( Fuzzed is NULL ),
        [userdata] setSteeringJointLeftAngleLimit( Fuzzed is NULL ),
        [userdata] setSteeringJointRightAngleLimit( Fuzzed is NULL ),
        [userdata] setSteeringJointUnlocked( Fuzzed is NULL ),
        [userdata] setSteeringJointSettings( Interactable, Joint, [Number, String], [Number, String], [Number, String], [Number, String], [Number, Boolean] ) args:7,
        [userdata] setSubMeshVisible( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
    },
    "joint": {
        function createPart( Joint, Uuid, Vec3, Vec3, Vec3, [Number, Boolean], ---, ---, ---, --- ),
        function createBlock( Fuzzed is NULL ),
        function getId( Fuzzed is NULL ),
        function getType( Joint ) args:1,
        function getShapeA( Joint ) args:1,
        function getShapeB( Fuzzed is NULL ),
        function getColor( Fuzzed is NULL ),
        function getAngle( Fuzzed is NULL ),
        function getAngularVelocity( Fuzzed is NULL ),
        function getAppliedImpulse( Fuzzed is NULL ),
        function isReversed( Fuzzed is NULL ),
        function setMotorVelocity( Joint, [Number, String], [Number, String] ) args:3,
        function setTargetAngle( Fuzzed is NULL ),
        function getLength( Fuzzed is NULL ),
        function setTargetLength( Joint, [Number, String], [Number, String], [Number, String] ) min:3 max:4,
        [userdata] createPart( Joint, Uuid, Vec3, Vec3, Vec3, [Number, Boolean], ---, ---, ---, --- ),
        [userdata] createBlock( Fuzzed is NULL ),
        [userdata] getId( Fuzzed is NULL ),
        [userdata] getType( Fuzzed is NULL ),
        [userdata] getShapeA( Fuzzed is NULL ),
        [userdata] getShapeB( Fuzzed is NULL ),
        [userdata] getColor( Fuzzed is NULL ),
        [userdata] getAngle( Fuzzed is NULL ),
        [userdata] getAngularVelocity( Fuzzed is NULL ),
        [userdata] getAppliedImpulse( Fuzzed is NULL ),
        [userdata] isReversed( Fuzzed is NULL ),
        [userdata] setMotorVelocity( Joint, [Number, String], [Number, String] ) args:3,
        [userdata] setTargetAngle( Joint, [Number, String], [Number, String], [Number, String] ) args:4,
        [userdata] getLength( Joint ) args:1,
        [userdata] setTargetLength( Joint, [Number, String], [Number, String], [Number, String] ) min:3 max:4,
        [userdata] __newindex( ---, String, --- ) args:3,
        [userdata] __index( ---, String ) args:2,
        [userdata] __eq( Fuzzed is NULL ),
    },
    "network": {
        [userdata] sendToServer( Fuzzed is NULL ),
        [userdata] sendToClient( Fuzzed is NULL ),
        [userdata] sendToClients( Fuzzed is NULL ),
        [userdata] setClientData( Network, [Number, Boolean, String, Table] ) args:2,
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
    },
    "projectile": {
        function getProjectileMass( String ) args:1,
        function playerFire( Fuzzed is NULL ),
        function shapeFire( Fuzzed is NULL ),
        function solveBallisticArc( Vec3, Vec3, [Number, String], [Number, String] ) args:4,
        function projectileAttack( Fuzzed is NULL ),
        function customProjectileAttack( [Number, Boolean, String, Table], String, Integer, Vec3, Vec3, [Unit, Player], Vec3, Vec3, Integer ) min:6 max:9,
        function shapeProjectileAttack( String, Integer, Vec3, Vec3, ---, --- ) min:5 max:6,
        function shapeCustomProjectileAttack( Fuzzed is NULL ),
        function harvestableProjectileAttack( Fuzzed is NULL ),
        function harvestableCustomProjectileAttack( Fuzzed is NULL ),
    },
    "melee": {
        function meleeAttack( String, Integer, Vec3, Vec3, ---, Integer, [Number, String] ) min:5 max:7,
    },
    "creation": {
        function exportToString( Fuzzed is NULL ),
        function importFromString( Fuzzed is NULL ),
        function importFromFile( Fuzzed is NULL ),
    },
    "cell": {
        function getNodesByTag( Fuzzed is NULL ),
        function getNodesByTags( Fuzzed is NULL ),
        function getInteractablesByTag( Integer, Integer, String ) args:3,
        function getInteractablesByTags( Integer, Integer, Table ) args:3,
        function getInteractablesByUuid( Fuzzed is NULL ),
        function getInteractablesByAnyUuid( Integer, Integer, Table ) args:3,
        function getHarvestables( Fuzzed is NULL ),
        function getTags( Fuzzed is NULL ),
    },
    "container": {
        function beginTransaction( Fuzzed is NULL ),
        function endTransaction( ) args:0,
        function abortTransaction( Fuzzed is NULL ),
        function getSize( Fuzzed is NULL ),
        function getMaxStackSize( Container ) args:1,
        function setItem( Container, Integer, Uuid, Integer, Integer ) min:4 max:5,
        function getItem( Fuzzed is NULL ),
        function getFirstItem( Container ) args:1,
        function hasChanged( Container, Integer ) args:2,
        function isEmpty( Fuzzed is NULL ),
        function getId( Fuzzed is NULL ),
        function quantity( Fuzzed is NULL ),
        function totalQuantity( Fuzzed is NULL ),
        function itemUuid( Fuzzed is NULL ),
        function swap( Fuzzed is NULL ),
        function spendFromSlot( Fuzzed is NULL ),
        function spend( Fuzzed is NULL ),
        function collectToSlot( Fuzzed is NULL ),
        function collect( Fuzzed is NULL ),
        function canCollect( Fuzzed is NULL ),
        function canSpend( Fuzzed is NULL ),
        function moveAll( Fuzzed is NULL ),
        function setFilters( Fuzzed is NULL ),
        [userdata] getSize( Container ) args:1,
        [userdata] getMaxStackSize( Fuzzed is NULL ),
        [userdata] setItem( Fuzzed is NULL ),
        [userdata] getItem( Fuzzed is NULL ),
        [userdata] hasChanged( Container, Integer ) args:2,
        [userdata] isEmpty( Container ) args:1,
        [userdata] setAllowCollect( Fuzzed is NULL ),
        [userdata] getAllowCollect( Fuzzed is NULL ),
        [userdata] setAllowSpend( Fuzzed is NULL ),
        [userdata] getAllowSpend( Container ) args:1,
        [userdata] canCollect( Fuzzed is NULL ),
        [userdata] canSpend( Fuzzed is NULL ),
        [userdata] setFilters( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
    },
    "ai": {
        function getClosestVisiblePlayerCharacter( Fuzzed is NULL ),
        function getClosestVisibleCharacterType( Unit, Uuid ) args:2,
        function getClosestVisibleCrop( Unit ) args:1,
        function isReachable( Fuzzed is NULL ),
        function getRandomCreationPosition( Fuzzed is NULL ),
        function directPathAvailable( Unit, Vec3, [Number, String] ) min:2 max:3,
        function getBreachablePosition( Fuzzed is NULL ),
        function getAimPosition( Fuzzed is NULL ),
    },
    "character": {
        function createCharacter( Fuzzed is NULL ),
        [userdata] getId( Fuzzed is NULL ),
        [userdata] getWorldPosition( Fuzzed is NULL ),
        [userdata] getVelocity( Fuzzed is NULL ),
        [userdata] getDirection( Character ) args:1,
        [userdata] getMass( Fuzzed is NULL ),
        [userdata] getHeight( Character ) args:1,
        [userdata] getPlayer( Fuzzed is NULL ),
        [userdata] getUnit( Character ) args:1,
        [userdata] getWorld( Fuzzed is NULL ),
        [userdata] isPlayer( Fuzzed is NULL ),
        [userdata] getRadius( Fuzzed is NULL ),
        [userdata] getGlowMultiplier( Character ) args:1,
        [userdata] setGlowMultiplier( Character, [Number, String] ) args:2,
        [userdata] bindAnimationCallback( Fuzzed is NULL ),
        [userdata] removeAnimationCallbacks( Character ) args:1,
        [userdata] addRenderable( Fuzzed is NULL ),
        [userdata] removeRenderable( Fuzzed is NULL ),
        [userdata] getAnimationInfo( Character, String ) args:2,
        [userdata] updateAnimation( Fuzzed is NULL ),
        [userdata] setMovementWeights( Fuzzed is NULL ),
        [userdata] setAllowTumbleAnimations( Fuzzed is NULL ),
        [userdata] setDowned( Character, [Number, Boolean] ) args:2,
        [userdata] isDowned( Fuzzed is NULL ),
        [userdata] setSwimming( Fuzzed is NULL ),
        [userdata] isSwimming( Fuzzed is NULL ),
        [userdata] setDiving( Character, [Number, Boolean] ) args:2,
        [userdata] isDiving( Fuzzed is NULL ),
        [userdata] setTumbling( Fuzzed is NULL ),
        [userdata] isTumbling( Fuzzed is NULL ),
        [userdata] applyTumblingImpulse( Character, Vec3 ) args:2,
        [userdata] getTumblingWorldPosition( Fuzzed is NULL ),
        [userdata] getTumblingWorldRotation( Fuzzed is NULL ),
        [userdata] getTumblingExtent( Fuzzed is NULL ),
        [userdata] getTumblingLinearVelocity( Character ) args:1,
        [userdata] getTumblingMass( Character ) args:1,
        [userdata] getCanSwim( Fuzzed is NULL ),
        [userdata] getActiveAnimations( Fuzzed is NULL ),
        [userdata] getTpBonePos( Fuzzed is NULL ),
        [userdata] getTpBoneRot( Fuzzed is NULL ),
        [userdata] setMovementEffects( Fuzzed is NULL ),
        [userdata] setMovementSpeedFraction( Character, [Number, String] ) args:2,
        [userdata] getMovementSpeedFraction( Fuzzed is NULL ),
        [userdata] setLockingInteractable( Fuzzed is NULL ),
        [userdata] getLockingInteractable( Fuzzed is NULL ),
        [userdata] getCurrentMovementNoiseRadius( Fuzzed is NULL ),
        [userdata] isSprinting( Character ) args:1,
        [userdata] isAiming( Fuzzed is NULL ),
        [userdata] isCrouching( Fuzzed is NULL ),
        [userdata] getCurrentMovementSpeed( Character ) args:1,
        [userdata] isOnGround( Character ) args:1,
        [userdata] getCharacterType( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Character, Character ) args:2,
    },
    "player": {
        function getAllPlayers( Fuzzed is NULL ),
        function placeLift( Fuzzed is NULL ),
        function removeLift( Player ) args:1,
        [userdata] getId( Fuzzed is NULL ),
        [userdata] getCharacter( Fuzzed is NULL ),
        [userdata] setCharacter( Player, Character ) args:2,
        [userdata] getName( Player ) args:1,
        [userdata] getInventory( Fuzzed is NULL ),
        [userdata] placeLift( Fuzzed is NULL ),
        [userdata] removeLift( Fuzzed is NULL ),
        [userdata] sendCharacterEvent( Player, String ) args:2,
        [userdata] isMale( Player ) args:1,
        [userdata] getCarry( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
    },
    "areaTrigger": {
        function createBox( Fuzzed is NULL ),
        function createBoxWater( Fuzzed is NULL ),
        function createAttachedBox( Fuzzed is NULL ),
        function destroy( Fuzzed is NULL ),
        [userdata] getId( Fuzzed is NULL ),
        [userdata] bindOnEnter( Fuzzed is NULL ),
        [userdata] bindOnExit( Fuzzed is NULL ),
        [userdata] bindOnStay( Fuzzed is NULL ),
        [userdata] bindOnProjectile( AreaTrigger, String, --- ) min:2 max:3,
        [userdata] getContents( Fuzzed is NULL ),
        [userdata] getWorldMin( Fuzzed is NULL ),
        [userdata] getWorldMax( Fuzzed is NULL ),
        [userdata] getWorldPosition( Fuzzed is NULL ),
        [userdata] setWorldPosition( Fuzzed is NULL ),
        [userdata] setSize( Fuzzed is NULL ),
        [userdata] getSize( Fuzzed is NULL ),
        [userdata] getHostInteractable( Fuzzed is NULL ),
        [userdata] getUserData( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
        [userdata] __gc( AreaTrigger ) args:1,
    },
    "game": {
        function getServerTick( Fuzzed is NULL ),
        function getCurrentTick( Fuzzed is NULL ),
        function setLimitedInventory( Fuzzed is NULL ),
        function enableRestrictions( [Number, Boolean] ) args:1,
        function bindChatCommand( Fuzzed is NULL ),
        function setTimeOfDay( Fuzzed is NULL ),
        function getTimeOfDay( ) args:0,
    },
    "world": {
        function createWorld( String, String, [Number, Boolean, String], Integer, ---, ---, ---, ---, ---, --- ),
        function loadWorld( Fuzzed is NULL ),
        function destroyWorld( Fuzzed is NULL ),
        function getId( Fuzzed is NULL ),
        function getCurrentWorld( Fuzzed is NULL ),
        function loadCell( Fuzzed is NULL ),
        [userdata] destroy( Fuzzed is NULL ),
        [userdata] getId( Fuzzed is NULL ),
        [userdata] loadCell( Fuzzed is NULL ),
        [userdata] setTerrainScriptData( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( World, World ) args:2,
    },
    "event": {
        function sendToGame( String, [Number, Boolean, String, Table] ) min:1 max:2,
        function sendToWorld( World, String, [Number, Boolean, String, Table] ) min:2 max:3,
        function sendToUnit( Fuzzed is NULL ),
        function sendToPlayer( Fuzzed is NULL ),
        function sendToCharacter( Fuzzed is NULL ),
        function sendToHarvestable( Harvestable, String, [Number, Boolean, String, Table] ) min:2 max:3,
        function sendToInteractable( Fuzzed is NULL ),
    },
    "item": {
        function myFunction( String ) args:1,
        function getShapeOffset( Fuzzed is NULL ),
        function getQualityLevel( Fuzzed is NULL ),
        function getPlantable( Fuzzed is NULL ),
        function getEdible( Fuzzed is NULL ),
        function getCharacterShape( Fuzzed is NULL ),
        function isTool( Uuid ) args:1,
        function isBlock( Fuzzed is NULL ),
        function isPart( Fuzzed is NULL ),
        function isJoint( Fuzzed is NULL ),
        function getPlantableUuids( Fuzzed is NULL ),
        function getInteractablesUuidsOfType( Fuzzed is NULL ),
        function getShapeSize( Fuzzed is NULL ),
        function getShapeDefaultColor( Fuzzed is NULL ),
    },
    "challenge": {
        function start( --- ) args:1,
        function stop( Fuzzed is NULL ),
        function hasStarted( Fuzzed is NULL ),
        function levelCompleted( Uuid, [Number, String], [Number, Boolean, String, Table] ) min:2 max:3,
        function getSaveData( Fuzzed is NULL ),
        function resolveContentPath( Fuzzed is NULL ),
        function takePicture( Integer, Integer, Integer ) min:0 max:3,
        function takePicturesForMenu( Fuzzed is NULL ),
    },
    "portal": {
        function createPortal( Fuzzed is NULL ),
        function destroy( Portal ) args:1,
        function addWorldPortalHook( World, String, Portal ) args:3,
        function popWorldPortalHook( Fuzzed is NULL ),
        [userdata] getId( Fuzzed is NULL ),
        [userdata] hasOpeningA( Portal ) args:1,
        [userdata] hasOpeningB( Portal ) args:1,
        [userdata] setOpeningA( Portal, Vec3, Quat ) args:3,
        [userdata] setOpeningB( Fuzzed is NULL ),
        [userdata] getPositionA( Fuzzed is NULL ),
        [userdata] getPositionB( Fuzzed is NULL ),
        [userdata] getRotationA( Portal ) args:1,
        [userdata] getRotationB( Portal ) args:1,
        [userdata] getWorldA( Fuzzed is NULL ),
        [userdata] getWorldB( Portal ) args:1,
        [userdata] getContentsA( Fuzzed is NULL ),
        [userdata] getContentsB( Fuzzed is NULL ),
        [userdata] transferAToB( Fuzzed is NULL ),
        [userdata] transferBToA( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( ---, String ) args:2,
        [userdata] __eq( Fuzzed is NULL ),
    },
    "quest": {
        function addQuest( Uuid ) args:1,
        function getQuest( Fuzzed is NULL ),
        function getQuestById( Fuzzed is NULL ),
        function getActiveQuests( Fuzzed is NULL ),
        function removeQuest( Fuzzed is NULL ),
        function completeQuest( Fuzzed is NULL ),
        function getIsRepeatable( Fuzzed is NULL ),
        function getHasCompleted( Uuid ) args:1,
        [userdata] getUuid( Fuzzed is NULL ),
        [userdata] getObjectives( Fuzzed is NULL ),
        [userdata] getRewards( Fuzzed is NULL ),
        [userdata] getDescription( Quest ) args:1,
        [userdata] remove( Fuzzed is NULL ),
        [userdata] complete( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
    },
    "harvestable": {
        function getId( Harvestable ) args:1,
        function getType( Harvestable ) args:1,
        function getName( Harvestable ) args:1,
        function getMaterial( Fuzzed is NULL ),
        function getMaterialId( Fuzzed is NULL ),
        function destroy( Fuzzed is NULL ),
        function create( Uuid, Vec3, Quat, Vec3 ) args:4,
        function getPosition( Fuzzed is NULL ),
        function getRotation( Fuzzed is NULL ),
        function getPoseWeight( Fuzzed is NULL ),
        function setPoseWeight( Harvestable, Integer, [Number, String] ) args:3,
        function getColor( Fuzzed is NULL ),
        function setColor( Fuzzed is NULL ),
        function getUvFrameIndex( Fuzzed is NULL ),
        function setUvFrameIndex( Fuzzed is NULL ),
        function setParams( Harvestable, [Number, Boolean, String, Table] ) args:2,
        [userdata] getId( Harvestable ) args:1,
        [userdata] getType( Fuzzed is NULL ),
        [userdata] getName( Harvestable ) args:1,
        [userdata] getMaterial( Harvestable ) args:1,
        [userdata] getMaterialId( Fuzzed is NULL ),
        [userdata] destroy( Fuzzed is NULL ),
        [userdata] getPosition( Fuzzed is NULL ),
        [userdata] getRotation( Fuzzed is NULL ),
        [userdata] getPoseWeight( Fuzzed is NULL ),
        [userdata] setPoseWeight( Fuzzed is NULL ),
        [userdata] getColor( Harvestable ) args:1,
        [userdata] setColor( Fuzzed is NULL ),
        [userdata] getUvFrameIndex( Harvestable ) args:1,
        [userdata] setUvFrameIndex( Harvestable, Integer ) args:2,
        [userdata] setParams( Fuzzed is NULL ),
        [userdata] getUuid( Fuzzed is NULL ),
        [userdata] getAabb( Fuzzed is NULL ),
        [userdata] setParams( Fuzzed is NULL ),
        [userdata] getData( Fuzzed is NULL ),
        [userdata] __newindex( ---, String, --- ) args:3,
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
    },
    "lift": {
        [userdata] getId( Lift ) args:1,
        [userdata] getWorldPosition( Fuzzed is NULL ),
        [userdata] getLevel( Lift ) args:1,
        [userdata] hasBodies( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
    },
    "construction": {
        function buildBlock( Fuzzed is NULL ),
        function validateLocalPosition( Fuzzed is NULL ),
    },
    "tool": {
        function checkLiftCollision( Fuzzed is NULL ),
        function preloadRenderables( Fuzzed is NULL ),
        function forceTool( Fuzzed is NULL ),
        [userdata] getId( Tool ) args:1,
        [userdata] getOwner( Tool ) args:1,
        [userdata] updateAnimation( Tool, String, [Number, String], [Number, String] ) min:3 max:4,
        [userdata] setMovementAnimation( Fuzzed is NULL ),
        [userdata] updateMovementAnimation( Fuzzed is NULL ),
        [userdata] getAnimationInfo( Fuzzed is NULL ),
        [userdata] updateJoint( Fuzzed is NULL ),
        [userdata] updateCamera( Fuzzed is NULL ),
        [userdata] setTpRenderables( Fuzzed is NULL ),
        [userdata] setTpColor( Fuzzed is NULL ),
        [userdata] updateFpAnimation( Tool, String, [Number, String], [Number, String], [Number, Boolean] ) min:3 max:5,
        [userdata] getFpAnimationInfo( Tool, String ) args:2,
        [userdata] setFpRenderables( Fuzzed is NULL ),
        [userdata] setFpColor( Tool, Color ) args:2,
        [userdata] updateFpCamera( Fuzzed is NULL ),
        [userdata] isCrouching( Fuzzed is NULL ),
        [userdata] isSprinting( Fuzzed is NULL ),
        [userdata] isOnGround( Fuzzed is NULL ),
        [userdata] setBlockSprint( Fuzzed is NULL ),
        [userdata] setMovementSlowDown( Fuzzed is NULL ),
        [userdata] isLocal( Tool ) args:1,
        [userdata] isInFirstPersonView( Tool ) args:1,
        [userdata] setDispersionFraction( Fuzzed is NULL ),
        [userdata] setCrossHairAlpha( Fuzzed is NULL ),
        [userdata] setInteractionTextSuppressed( Fuzzed is NULL ),
        [userdata] getPosition( Fuzzed is NULL ),
        [userdata] getDirection( Fuzzed is NULL ),
        [userdata] getMovementVelocity( Fuzzed is NULL ),
        [userdata] getRelativeMoveDirection( Fuzzed is NULL ),
        [userdata] getMovementSpeedFraction( Tool ) args:1,
        [userdata] getTpBonePos( Fuzzed is NULL ),
        [userdata] getTpBoneDir( ---, String ) args:2,
        [userdata] getFpBonePos( Fuzzed is NULL ),
        [userdata] __newindex( ---, String, --- ) args:3,
        [userdata] __index( ---, String ) args:2,
    },
    "audio": {
        function play( String, Vec3 ) min:1 max:2,
    },
    "particle": {
        function createParticle( Fuzzed is NULL ),
    },
    "effect": {
        function playEffect( Fuzzed is NULL ),
        function playHostedEffect( Fuzzed is NULL ),
        function createEffect( Fuzzed is NULL ),
        function createEffect2D( String ) args:1,
        [userdata] getId( Fuzzed is NULL ),
        [userdata] start( Fuzzed is NULL ),
        [userdata] stop( Fuzzed is NULL ),
        [userdata] destroy( Fuzzed is NULL ),
        [userdata] isPlaying( Fuzzed is NULL ),
        [userdata] setPosition( Fuzzed is NULL ),
        [userdata] setScale( Fuzzed is NULL ),
        [userdata] setVelocity( Effect, Vec3 ) args:2,
        [userdata] setRotation( Fuzzed is NULL ),
        [userdata] setOffsetPosition( Fuzzed is NULL ),
        [userdata] setOffsetRotation( Fuzzed is NULL ),
        [userdata] setParameter( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Effect, Effect ) args:2,
        [userdata] __gc( Fuzzed is NULL ),
    },
    "localPlayer": {
        function getPlayer( ) args:0,
        function getId( Fuzzed is NULL ),
        function getPosition( ) args:0,
        function getDirection( Fuzzed is NULL ),
        function getRight( Fuzzed is NULL ),
        function getUp( ) args:0,
        function getRaycastStart( Fuzzed is NULL ),
        function getRaycast( Fuzzed is NULL ),
        function isInFirstPersonView( ) args:0,
        function getFpBonePos( String ) args:1,
        function getActiveItem( Fuzzed is NULL ),
        function getSelectedHotbarSlot( Fuzzed is NULL ),
        function getCarry( Fuzzed is NULL ),
        function getInventory( ) args:0,
        function setDirection( Vec3 ) args:1,
        function getFpAnimationInfo( Fuzzed is NULL ),
        function updateFpAnimation( Fuzzed is NULL ),
        function addRenderable( Fuzzed is NULL ),
        function removeRenderable( String ) args:1,
        function setBlockSprinting( Fuzzed is NULL ),
        function setLockedControls( Fuzzed is NULL ),
    },
    "camera": {
        function setPosition( Vec3 ) args:1,
        function getPosition( Fuzzed is NULL ),
        function getDefaultPosition( ) args:0,
        function setDirection( Fuzzed is NULL ),
        function getDirection( ) args:0,
        function getUp( Fuzzed is NULL ),
        function getRight( ) args:0,
        function getFov( Fuzzed is NULL ),
        function setShake( [Number, String] ) args:1,
        function setCameraState( Integer ) args:1,
        function getCameraState( ) args:0,
        function setCameraPullback( Integer, Integer ) args:2,
        function cameraSphereCast( Fuzzed is NULL ),
    },
    "gui": {
        "widget": {
            function getId( ),
            function getName( ),
            function getTypeName( ),
            function getPosition( Fuzzed is NULL ),
            function setPosition( Fuzzed is NULL ),
            function getVisible( Fuzzed is NULL ),
            function setVisible( ),
            function getSize( Fuzzed is NULL ),
            function setSize( Fuzzed is NULL ),
            function getText( Fuzzed is NULL ),
            function setText( Fuzzed is NULL ),
            function destroy( ),
            function find( Fuzzed is NULL ),
            function bindOnClick( ),
            [userdata] find( Fuzzed is NULL ),
            [userdata] getName( Fuzzed is NULL ),
            [userdata] getTypeName( ),
            [userdata] getPosition( ),
            [userdata] setPosition( Fuzzed is NULL ),
            [userdata] getVisible( Fuzzed is NULL ),
            [userdata] setVisible( Fuzzed is NULL ),
            [userdata] getSize( ),
            [userdata] setSize( ),
            [userdata] getText( Fuzzed is NULL ),
            [userdata] setText( ),
            [userdata] find( Fuzzed is NULL ),
            [userdata] bindOnClick( Fuzzed is NULL ),
            [userdata] __newindex( Fuzzed is NULL ),
            [userdata] __index( ---, String ) args:2,
            [userdata] __eq( Fuzzed is NULL ),
        },
        "interface": {
            [userdata] destroy( GuiInterface ) args:1,
            [userdata] open( Fuzzed is NULL ),
            [userdata] close( Fuzzed is NULL ),
            [userdata] isActive( Fuzzed is NULL ),
            [userdata] setText( Fuzzed is NULL ),
            [userdata] setTextFromItemName( GuiInterface, String, Uuid ) args:3,
            [userdata] setVisible( Fuzzed is NULL ),
            [userdata] setImage( GuiInterface, String, String ) args:3,
            [userdata] setIconImage( GuiInterface, String, Uuid ) args:3,
            [userdata] setButtonState( Fuzzed is NULL ),
            [userdata] setSliderRange( Fuzzed is NULL ),
            [userdata] setSliderPosition( GuiInterface, String, Integer ) args:3,
            [userdata] setSliderRangeLimit( Fuzzed is NULL ),
            [userdata] setSliderData( Fuzzed is NULL ),
            [userdata] clearList( Fuzzed is NULL ),
            [userdata] addListItem( Fuzzed is NULL ),
            [userdata] setSelectedListItem( Fuzzed is NULL ),
            [userdata] clearGrid( GuiInterface, String ) args:2,
            [userdata] addGridItemsFromFile( GuiInterface, String, String, [Number, Boolean, String] ) min:3 max:4,
            [userdata] addGridItem( Fuzzed is NULL ),
            [userdata] setGridItem( GuiInterface, String, Integer, --- ) args:4,
            [userdata] setGridSize( Fuzzed is NULL ),
            [userdata] setContainer( Fuzzed is NULL ),
            [userdata] setContainers( Fuzzed is NULL ),
            [userdata] setData( GuiInterface, String, [Number, Boolean, String] ) args:3,
            [userdata] setHost( Fuzzed is NULL ),
            [userdata] setWorldPosition( Fuzzed is NULL ),
            [userdata] setMaxRenderDistance( Fuzzed is NULL ),
            [userdata] setFadeRange( Fuzzed is NULL ),
            [userdata] setRequireLineOfSight( Fuzzed is NULL ),
            [userdata] setOnCloseCallback( Fuzzed is NULL ),
            [userdata] setButtonCallback( Fuzzed is NULL ),
            [userdata] setSliderCallback( Fuzzed is NULL ),
            [userdata] setGridButtonCallback( Fuzzed is NULL ),
            [userdata] setGridItemChangedCallback( GuiInterface, String, String ) args:3,
            [userdata] setListSelectionCallback( Fuzzed is NULL ),
            [userdata] __newindex( Fuzzed is NULL ),
            [userdata] __index( ---, String ) args:2,
            [userdata] __eq( Fuzzed is NULL ),
            [userdata] __gc( Fuzzed is NULL ),
        },
        function createWidget( ),
        function getScreenSize( Fuzzed is NULL ),
        function createContainerGui( Fuzzed is NULL ),
        function createWorkbenchGui( Fuzzed is NULL ),
        function createCookBotGui( Fuzzed is NULL ),
        function createCraftBotGui( Fuzzed is NULL ),
        function createMechanicStationGui( Fuzzed is NULL ),
        function createSurvivalHudGui( Fuzzed is NULL ),
        function createHideoutGui( [Number, Boolean] ) min:0 max:1,
        function createDressBotGui( [Number, Boolean] ) min:0 max:1,
        function createEngineGui( [Number, Boolean] ) min:0 max:1,
        function createSeatGui( [Number, Boolean] ) min:0 max:1,
        function createNameTagGui( Fuzzed is NULL ),
        function createBagIconGui( [Number, Boolean] ) min:0 max:1,
        function createAmmunitionContainerGui( Fuzzed is NULL ),
        function createBatteryContainerGui( [Number, Boolean] ) min:0 max:1,
        function createChemicalContainerGui( [Number, Boolean] ) min:0 max:1,
        function createFertilizerContainerGui( [Number, Boolean] ) min:0 max:1,
        function createGasContainerGui( Fuzzed is NULL ),
        function createSeedContainerGui( [Number, Boolean] ) min:0 max:1,
        function createWaterContainerGui( Fuzzed is NULL ),
        function createSeatUpgradeGui( [Number, Boolean] ) min:0 max:1,
        function createSteeringBearingGui( [Number, Boolean] ) min:0 max:1,
        function createChallengeHUDGui( [Number, Boolean] ) min:0 max:1,
        function createChallengeMessageGui( Fuzzed is NULL ),
        function displayAlertText( String, [Number, String] ) min:1 max:2,
        function hideGui( Fuzzed is NULL ),
        function getKeyBinding( Fuzzed is NULL ),
        function setInteractionText( Fuzzed is NULL ),
        function setCenterIcon( Fuzzed is NULL ),
        function setProgressFraction( Fuzzed is NULL ),
        function createCharacterCustomizationGui( Fuzzed is NULL ),
        function setCharacterDebugText( Fuzzed is NULL ),
        function exitToMenu( Fuzzed is NULL ),
        function chatMessage( Fuzzed is NULL ),
    },
    "visualization": {
        function setCreationBodies( Table ) args:1,
        function setCreationVisible( Fuzzed is NULL ),
        function setCreationValid( Fuzzed is NULL ),
        function setCreationFreePlacement( [Number, Boolean] ) args:1,
        function setCreationFreePlacementPosition( Vec3 ) args:1,
        function setCreationFreePlacementRotation( Fuzzed is NULL ),
        function setLiftPosition( Fuzzed is NULL ),
        function setLiftLevel( Fuzzed is NULL ),
        function setLiftVisible( Fuzzed is NULL ),
        function setLiftValid( [Number, Boolean] ) args:1,
        function setBlockVisualization( Fuzzed is NULL ),
    },
    "render": {
        function setOutdoorLighting( [Number, String] ) args:1,
        function getOutdoorLighting( Fuzzed is NULL ),
        function getScreenCoordinatesFromWorldPosition( Fuzzed is NULL ),
    },
    "physics": {
        function raycast( Vec3, Vec3, [Harvestable, Character, Body], Integer ) min:2 max:4,
        function distanceRaycast( Vec3, Vec3 ) args:2,
        function applyImpulse( Userdata, Vec3, Boolean, Vec3 ) min:2 max:4,
        function applyTorque( Fuzzed is NULL ),
        function explode( Fuzzed is NULL ),
        function setGravity( Fuzzed is NULL ),
        function getGravity( Fuzzed is NULL ),
        function getGroundMaterial( Vec3 ) args:1,
        function sphereContactCount( Fuzzed is NULL ),
        function getSphereContacts( ),
    },
    "terrainData": {
        function save( [Number, Boolean, String, Table] ) args:1,
        function load( ) args:0,
        function exists( Fuzzed is NULL ),
        function legacy_saveTerrainData( Integer, [Number, Boolean, String, Table] ) args:2,
        function legacy_loadTerrainData( Fuzzed is NULL ),
        function legacy_setData( Fuzzed is NULL ),
        function legacy_getData( Fuzzed is NULL ),
    },
    "json": {
        function open( Fuzzed is NULL ),
        function save( Fuzzed is NULL ),
        function parseJsonString( Fuzzed is NULL ),
        function writeJsonString( Fuzzed is NULL ),
    },
    "noise": {
        function simplexNoise1d( Fuzzed is NULL ),
        function simplexNoise2d( Fuzzed is NULL ),
        function intNoise2d( Integer, Integer, Integer ) args:3,
        function floatNoise2d( Fuzzed is NULL ),
        function perlinNoise2d( Fuzzed is NULL ),
        function octaveNoise2d( Fuzzed is NULL ),
        function randomRange( [Number, String], [Number, String] ) args:2,
        function randomNormalDistribution( Fuzzed is NULL ),
        function gunSpread( Vec3, [Number, String] ) args:2,
    },
    "util": {
        function clamp( [Number, String], [Number, String], [Number, String] ) args:3,
        function lerp( Fuzzed is NULL ),
        function bezier2( Fuzzed is NULL ),
        function bezier3( [Number, String], [Number, String], [Number, String], [Number, String], [Number, String] ) args:5,
        function positiveModulo( Fuzzed is NULL ),
        function smoothstep( Fuzzed is NULL ),
        function smootherstep( Fuzzed is NULL ),
    },
    "log": {
        function info( String ) args:1,
        function warning( String ) args:1,
        function error( String ) args:1,
    },
    "debugDraw": {
        function addArrow( Fuzzed is NULL ),
        function removeArrow( String ) args:1,
        function addSphere( String, Vec3, [Number, String], Color ) min:2 max:4,
        function removeSphere( Fuzzed is NULL ),
        function clear( Fuzzed is NULL ),
    },
    "vec3": {
        function new( Fuzzed is NULL ),
        function zero( Fuzzed is NULL ),
        function one( Fuzzed is NULL ),
        function getX( Fuzzed is NULL ),
        function setX( Fuzzed is NULL ),
        function getY( Vec3 ) args:1,
        function setY( Fuzzed is NULL ),
        function getZ( Vec3 ) args:1,
        function setZ( Fuzzed is NULL ),
        function normalize( Fuzzed is NULL ),
        function dot( Fuzzed is NULL ),
        function cross( Fuzzed is NULL ),
        function length( Fuzzed is NULL ),
        function length2( Fuzzed is NULL ),
        function lerp( Vec3, Vec3, [Number, String] ) args:3,
        function bezier2( Vec3, Vec3, Vec3, [Number, String] ) args:4,
        function bezier3( Fuzzed is NULL ),
        function rotateX( Fuzzed is NULL ),
        function rotateY( Fuzzed is NULL ),
        function rotateZ( Fuzzed is NULL ),
        function rotate( Fuzzed is NULL ),
        function getRotation( Fuzzed is NULL ),
        function closestAxis( Fuzzed is NULL ),
        [userdata] normalize( Vec3 ) args:1,
        [userdata] dot( Vec3, Vec3 ) args:2,
        [userdata] cross( Fuzzed is NULL ),
        [userdata] length( Fuzzed is NULL ),
        [userdata] length2( Fuzzed is NULL ),
        [userdata] rotateX( Fuzzed is NULL ),
        [userdata] rotateY( Vec3, [Number, String] ) args:2,
        [userdata] rotateZ( Fuzzed is NULL ),
        [userdata] rotate( Vec3, ---, Vec3 ) args:3,
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __unm( Fuzzed is NULL ),
        [userdata] __add( Fuzzed is NULL ),
        [userdata] __sub( Vec3, Vec3 ) args:2,
        [userdata] __div( Vec3, [Number, String, Vec3] ) args:2,
        [userdata] __mul( Fuzzed is NULL ),
        [userdata] __lt( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
        [userdata] __tostring( Vec3 ) args:1,
    },
    "quat": {
        function new( Fuzzed is NULL ),
        function identity( Fuzzed is NULL ),
        function angleAxis( Fuzzed is NULL ),
        function getX( Fuzzed is NULL ),
        function setX( Fuzzed is NULL ),
        function getY( Quat ) args:1,
        function setY( Fuzzed is NULL ),
        function getZ( Fuzzed is NULL ),
        function setZ( Fuzzed is NULL ),
        function getW( Fuzzed is NULL ),
        function setW( Fuzzed is NULL ),
        function round90( Fuzzed is NULL ),
        function lookRotation( Vec3, Vec3 ) args:2,
        function slerp( Quat, Quat, [Number, String] ) args:3,
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( ---, String ) args:2,
        [userdata] __mul( Fuzzed is NULL ),
        [userdata] __eq( Quat, Quat ) args:2,
    },
    "uuid": {
        function new( Fuzzed is NULL ),
        function getNil( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( ---, String ) args:2,
        [userdata] __tostring( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
    },
    "color": {
        function new( Fuzzed is NULL ),
        function getR( Fuzzed is NULL ),
        function getG( Color ) args:1,
        function getB( Fuzzed is NULL ),
        function getA( Color ) args:1,
        function setR( Color, [Number, String] ) args:2,
        function setG( Fuzzed is NULL ),
        function setB( Fuzzed is NULL ),
        function setA( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __add( Fuzzed is NULL ),
        [userdata] __sub( Fuzzed is NULL ),
        [userdata] __div( Color, [Number, String, Color] ) args:2,
        [userdata] __mul( Color, [Number, String, Color] ) args:2,
        [userdata] __eq( Color, Color ) args:2,
        [userdata] __tostring( Fuzzed is NULL ),
    },
    "storage": {
        function save( Fuzzed is NULL ),
        function load( Fuzzed is NULL ),
        [userdata] save( Fuzzed is NULL ),
        [userdata] load( Storage ) args:1,
        [userdata] __newindex( ---, String, --- ) args:3,
        [userdata] __index( Fuzzed is NULL ),
    },
    "unit": {
        function createUnit( Fuzzed is NULL ),
        function HACK_getAllUnits_HACK( Fuzzed is NULL ),
        [userdata] destroy( Fuzzed is NULL ),
        [userdata] getId( Unit ) args:1,
        [userdata] setWhiskerData( Fuzzed is NULL ),
        [userdata] setHearingData( Fuzzed is NULL ),
        [userdata] createState( Fuzzed is NULL ),
        [userdata] setMovementDirection( Fuzzed is NULL ),
        [userdata] setFacingDirection( Unit, Vec3 ) args:2,
        [userdata] setMovementType( Fuzzed is NULL ),
        [userdata] setWantsJump( Fuzzed is NULL ),
        [userdata] getCurrentMovementDirection( Fuzzed is NULL ),
        [userdata] getCurrentFacingDirection( Unit ) args:1,
        [userdata] sendCharacterEvent( Fuzzed is NULL ),
        [userdata] getCharacter( Fuzzed is NULL ),
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( ---, String ) args:2,
        [userdata] __eq( Fuzzed is NULL ),
    },
    "aiState": {
        [userdata] start( Fuzzed is NULL ),
        [userdata] stop( Fuzzed is NULL ),
        [userdata] onFixedUpdate( Fuzzed is NULL ),
        [userdata] onUnitUpdate( Fuzzed is NULL ),
        [userdata] isDone( Fuzzed is NULL ),
        [userdata] getMovementDirection( Fuzzed is NULL ),
        [userdata] getFacingDirection( Fuzzed is NULL ),
        [userdata] getMovementType( AiState ) args:1,
        [userdata] getWantsJump( AiState ) args:1,
        [userdata] __newindex( Fuzzed is NULL ),
        [userdata] __index( AiState, String ) args:2,
        [userdata] __eq( Fuzzed is NULL ),
        [userdata] __gc( Fuzzed is NULL ),
    },
    "pathfinder": {
        function getPath( Character, Vec3, [Number, Boolean], Table ) min:2 max:4,
        function clearWorld( ),
        function getSortedNodes( Vec3, [Number, String], [Number, String] ) args:3,
    },
    "pathNode": {
        function createPathNode( Vec3, [Number, String] ) args:2,
        [userdata] destroy( Fuzzed is NULL ),
        [userdata] connect( Fuzzed is NULL ),
        [userdata] getPosition( Fuzzed is NULL ),
        [userdata] __newindex( ---, String, --- ) args:3,
        [userdata] __index( Fuzzed is NULL ),
        [userdata] __eq( Fuzzed is NULL ),
    },
    "terrainTile": {
        function getHeightAt( Fuzzed is NULL ),
        function getColorAt( Integer, Integer, Integer, Integer, Integer, Integer ) args:6,
        function getMaterialAt( Fuzzed is NULL ),
        function getClutterIdxAt( Fuzzed is NULL ),
        function getAssetsForCell( Fuzzed is NULL ),
        function getHarvestablesForCell( Fuzzed is NULL ),
        function getCreationsForCell( Fuzzed is NULL ),
        function getNodesForCell( Fuzzed is NULL ),
        function getPrefabsForCell( Integer, Integer, Integer, ---, ---, ---, ---, ---, ---, --- ),
        function getDecalsForCell( Integer, Integer, Integer, ---, ---, ---, ---, ---, ---, --- ),
        function getSize( Fuzzed is NULL ),
        function getTileUuid( String ) args:1,
        function getCreatorId( Fuzzed is NULL ),
        function getContentFromPrefab( Fuzzed is NULL ),
    }
}