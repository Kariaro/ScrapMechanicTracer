sm = {
	physics = {
		types = nil,
		filter = nil,
		function raycast() args(?),
		function distanceRaycast( Vec3, Vec3 ) args(2),
		function applyImpulse( Userdata, Vec3, Boolean, Vec3 ) args(2,4),
		function applyTorque( Userdata, Vec3, Boolean ) args(2,3),
		[server] function explode( Vec3, Integer, [Number, String], [Number, String], [Number, String], String, --- ) args(5,7),
		[server] function setGravity( [Number, String] ) args(1),
		[server] function getGravity() args(?),
		function getGroundMaterial( Vec3 ) args(1),
		function sphereContactCount() args(?),
		[server] function getSphereContacts( Vec3, [Number, String] ) args(2)
	},
	terrainData = {
		function save( --- ) args(1),
		function load() args(0),
		function exists() args(0),
		function legacy_saveTerrainData( Integer, --- ) args(2),
		function legacy_loadTerrainData( Integer ) args(1),
		function legacy_setData( String ) args(1),
		function legacy_getData() args(0)
	},
	json = {
		function open() args(?),
		function save( ---, String ) args(2),
		function parseJsonString( String ) args(1),
		function writeJsonString( --- ) args(1)
	},
	noise = {
		function simplexNoise1d( [Number, String] ) args(1),
		function simplexNoise2d( [Number, String], [Number, String] ) args(2),
		function intNoise2d( Integer, Integer, Integer ) args(3),
		function floatNoise2d( [Number, String], [Number, String], Integer ) args(3),
		function perlinNoise2d( [Number, String], [Number, String], Integer ) args(3),
		function octaveNoise2d( [Number, String], [Number, String], Integer, Integer ) args(4),
		function randomRange( [Number, String], [Number, String] ) args(2),
		function randomNormalDistribution( [Number, String], [Number, String] ) args(2),
		function gunSpread( Vec3, [Number, String] ) args(2)
	},
	util = {
		function clamp( [Number, String], [Number, String], [Number, String] ) args(3),
		function lerp( [Number, String], [Number, String], [Number, String] ) args(3),
		function bezier2( [Number, String], [Number, String], [Number, String], [Number, String] ) args(4),
		function bezier3( [Number, String], [Number, String], [Number, String], [Number, String], [Number, String] ) args(5),
		function positiveModulo( Integer, Integer ) args(2),
		function smoothstep( [Number, String], [Number, String], [Number, String] ) args(3),
		function smootherstep( [Number, String], [Number, String], [Number, String] ) args(3)
	},
	projectile = {
		function getProjectileMass( String ) args(1),
		function playerFire( String, Vec3, Vec3, Vec3, Vec3, Integer ) args(3,6),
		function shapeFire( ---, String, Vec3, Vec3, Integer ) args(4,5),
		function solveBallisticArc( Vec3, Vec3, [Number, String], [Number, String] ) args(4),
		function projectileAttack( String, Integer, Vec3, Vec3, ---, Vec3, Vec3, Integer ) args(5,8),
		function customProjectileAttack( ---, String, Integer, Vec3, Vec3, ---, Vec3, Vec3, Integer ) args(6,9),
		function shapeProjectileAttack( String, Integer, Vec3, Vec3, ---, Integer ) args(5,6),
		function shapeCustomProjectileAttack( ---, String, Integer, Vec3, Vec3, ---, Integer ) args(6,7),
		function harvestableProjectileAttack() args(?),
		function harvestableCustomProjectileAttack( ---, String, Integer, Vec3, Vec3, ---, Integer ) args(6,7)
	},
	melee = {
		function meleeAttack( String, Integer, Vec3, Vec3, ---, Integer, [Number, String] ) args(5,7)
	},
	game = {
		function getServerTick() args(0),
		function getCurrentTick() args(0),
		function setLimitedInventory( Number ) args(1),
		function getLimitedInventory() args(0),
		function enableRestrictions( Number ) args(1),
		function setEnableAmmoConsumption( Number ) args(1),
		function getEnableAmmoConsumption() args(0),
		function setEnableFuelConsumption( Number ) args(1),
		function getEnableFuelConsumption() args(0),
		function setEnableUpgradeCost( Number ) args(1),
		function getEnableUpgradeCost() args(0),
		function bindChatCommand( String, Table, String, String ) args(4),
		function setTimeOfDay( [Number, String] ) args(1),
		function getTimeOfDay() args(0)
	},
	creation = {
		[server] function exportToString() args(?),
		[server] function importFromString() args(?),
		[server] function importFromFile() args(?)
	},
	cell = {
		function getNodesByTag() args(?),
		function getNodesByTags() args(?),
		[server] function getInteractablesByTag( Integer, Integer, String ) args(3),
		[server] function getInteractablesByTags( Integer, Integer, Table ) args(3),
		[server] function getInteractablesByUuid( Integer, Integer, Uuid ) args(3),
		[server] function getInteractablesByAnyUuid( Integer, Integer, Table ) args(3),
		[server] function getHarvestables() args(?),
		function getTags( Integer, Integer ) args(2)
	},
	network = {
		[userdata] function sendToServer( Network, ---, --- ) args(2,3),
		[userdata] function sendToClient( Network, ---, ---, --- ) args(3,4),
		[userdata] function sendToClients( Network, ---, --- ) args(2,3),
		[userdata] function setClientData( Network, --- ) args(2),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2)
	},
	storage = {
		[server] function save( ---, --- ) args(2),
		[server] function load( --- ) args(1),
		[userdata] [server] function save( Storage, --- ) args(2),
		[userdata] [server] function load( Storage ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2)
	},
	event = {
		[server] function sendToGame() args(?),
		[server] function sendToWorld() args(?),
		[server] function sendToUnit() args(?),
		[server] function sendToPlayer() args(?),
		[server] function sendToCharacter() args(?),
		[server] function sendToHarvestable() args(?),
		[server] function sendToInteractable() args(?)
	},
	log = {
		function info( String ) args(1),
		function warning( String ) args(1),
		function error( String ) args(1)
	},
	debugDraw = {
		function addArrow( String, Vec3, Vec3, Color ) args(2,4),
		function removeArrow( String ) args(1),
		function addSphere( String, Vec3, [Number, String], Color ) args(2,4),
		function removeSphere( String ) args(1),
		function clear( String ) args(0,1)
	},
	ai = {
		function getClosestVisiblePlayerCharacter( --- ) args(1),
		function getClosestVisibleCharacterType( ---, Uuid ) args(2),
		function getClosestVisibleCrop( --- ) args(1),
		function isReachable( ---, Vec3 ) args(2),
		function getRandomCreationPosition( --- ) args(1),
		function directPathAvailable( ---, Vec3, [Number, String] ) args(2,3),
		function getBreachablePosition() args(?),
		function getAimPosition( ---, ---, [Number, String], [Number, String] ) args(4)
	},
	item = {
		[server] function myFunction( String ) args(1),
		function getShapeOffset( Uuid ) args(1),
		function getQualityLevel( Uuid ) args(1),
		function getPlantable( Uuid ) args(1),
		function getEdible( Uuid ) args(1),
		function getCharacterShape( Uuid ) args(1),
		function isTool( Uuid ) args(1),
		function isBlock( Uuid ) args(1),
		function isPart( Uuid ) args(1),
		function isJoint( Uuid ) args(1),
		function getPlantableUuids() args(0),
		function getInteractablesUuidsOfType( String ) args(1),
		function getShapeSize( Uuid ) args(1),
		function getShapeDefaultColor( Uuid ) args(1)
	},
	challenge = {
		[server] function start( --- ) args(1),
		[server] function stop() args(0),
		[server] function hasStarted() args(0),
		[server] function levelCompleted( Uuid, [Number, String], --- ) args(2,3),
		[server] function getCompletionTime( Uuid ) args(1),
		[server] function getSaveData( Uuid ) args(1),
		[server] function resolveContentPath( String ) args(1),
		[server] function takePicture( Integer, Integer, Integer ) args(0,3),
		[server] function takePicturesForMenu() args(?)
	},
	construction = {
		constants = nil,
		[server] function buildBlock( Uuid, Vec3, --- ) args(2,3),
		function validateLocalPosition() args(?)
	},
	shape = {
		function getId( Shape ) args(1),
		function getShapeUuid( --- ) args(1),
		function getColor( --- ) args(1),
		[server] function setColor( ---, Color ) args(2),
		function getMass( --- ) args(1),
		function getBuoyancy( --- ) args(1),
		function getMaterial( --- ) args(1),
		function getWorldPosition( --- ) args(1),
		function getLocalPosition( --- ) args(1),
		function getVelocity( --- ) args(1),
		function getXAxis( --- ) args(1),
		function getYAxis( --- ) args(1),
		function getZAxis( --- ) args(1),
		function getAt( --- ) args(1),
		function getRight( --- ) args(1),
		function getUp( --- ) args(1),
		function transformPoint( ---, Vec3 ) args(2),
		function transformLocalPoint( ---, Vec3 ) args(2),
		function transformRotation( ---, Quat ) args(2),
		function getBoundingBox( --- ) args(1),
		function getBody( --- ) args(1),
		function getInteractable( --- ) args(1),
		[server] function destroyPart( ---, Integer ) args(1,2),
		function getWorldRotation( --- ) args(1),
		[server] function createPart() args(?),
		[server] function createBlock() args(?),
		[server] function createJoint( ---, Uuid, Vec3, Vec3 ) args(4),
		function getMaterialId( --- ) args(1),
		function getIsHarvest( Uuid ) args(1),
		function getIsStackable( Uuid ) args(1),
		function getShapeTypeColor( Uuid ) args(1),
		[server] function destroyShape( ---, Integer ) args(1,2),
		function getShapeTitle( Uuid ) args(1),
		function getShapeDescription( Uuid ) args(1),
		function getShapeIcon( Uuid ) args(1),
		function shapeExists( --- ) args(1),
		function shapesInSphere( Vec3, [Number, String] ) args(2),
		[server] function getNeighbours( --- ) args(1),
		[server] function getPipedNeighbours( --- ) args(1),
		[userdata] function getId( Shape ) args(1),
		[userdata] function getShapeUuid( --- ) args(1),
		[userdata] function getColor( --- ) args(1),
		[userdata] [server] function setColor( ---, Color ) args(2),
		[userdata] function getMass( --- ) args(1),
		[userdata] function getBuoyancy( --- ) args(1),
		[userdata] function getMaterial( --- ) args(1),
		[userdata] function getWorldPosition( --- ) args(1),
		[userdata] function getLocalPosition( --- ) args(1),
		[userdata] function getVelocity( --- ) args(1),
		[userdata] function getXAxis( --- ) args(1),
		[userdata] function getYAxis( --- ) args(1),
		[userdata] function getZAxis( --- ) args(1),
		[userdata] function getAt( --- ) args(1),
		[userdata] function getRight( --- ) args(1),
		[userdata] function getUp( --- ) args(1),
		[userdata] function transformPoint( ---, Vec3 ) args(2),
		[userdata] function transformLocalPoint( ---, Vec3 ) args(2),
		[userdata] function transformRotation( ---, Quat ) args(2),
		[userdata] function getBoundingBox( --- ) args(1),
		[userdata] function getBody( --- ) args(1),
		[userdata] function getInteractable( --- ) args(1),
		[userdata] [server] function destroyPart( ---, Integer ) args(1,2),
		[userdata] function getWorldRotation( --- ) args(1),
		[userdata] [server] function createJoint( ---, Uuid, Vec3, Vec3 ) args(4),
		[userdata] function getMaterialId( --- ) args(1),
		[userdata] function getIsHarvest( Uuid ) args(1),
		[userdata] function getIsStackable( Uuid ) args(1),
		[userdata] [server] function destroyShape( ---, Integer ) args(1,2),
		[userdata] [server] function destroyBlock( ---, Vec3, Vec3, Integer ) args(2,4),
		[userdata] function getClosestBlockLocalPosition( ---, Vec3 ) args(2),
		[userdata] function shapeExists( --- ) args(1),
		[userdata] function shapesInSphere( Vec3, [Number, String] ) args(2),
		[userdata] [server] function getNeighbours( --- ) args(1),
		[userdata] [server] function getPipedNeighbours( --- ) args(1),
		[userdata] [server] function replaceShape( ---, Uuid ) args(2),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Shape, Shape ) args(2)
	},
	body = {
		function getId( Body ) args(1),
		[server] function getCreationId( --- ) args(1),
		function getMass( --- ) args(1),
		function getWorldPosition( --- ) args(1),
		function getVelocity( --- ) args(1),
		function getAngularVelocity( --- ) args(1),
		function getShapes( --- ) args(1),
		function getCreationShapes( --- ) args(1),
		function getCreationBodies( --- ) args(1),
		function getCreationsFromBodies( Table ) args(1),
		[server] function hasChanged( ---, Integer ) args(2),
		[server] function getAllBodies() args(0),
		[server] function createBody() args(?),
		function getWorldRotation( --- ) args(1),
		function getCenterOfMassPosition( --- ) args(1),
		function isDynamic( --- ) args(1),
		function isStatic( --- ) args(1),
		function isOnLift( --- ) args(1),
		function isDestructable( --- ) args(1),
		[server] function setDestructable( ---, Number ) args(2),
		function isBuildable( --- ) args(1),
		[server] function setBuildable( ---, Number ) args(2),
		function isPaintable( --- ) args(1),
		[server] function setPaintable( ---, Number ) args(2),
		function isConnectable( --- ) args(1),
		[server] function setConnectable( ---, Number ) args(2),
		function isLiftable( --- ) args(1),
		[server] function setLiftable( ---, Number ) args(2),
		function isUsable( --- ) args(1),
		[server] function setUsable( ---, Number ) args(2),
		function isErasable( --- ) args(1),
		[server] function setErasable( ---, Number ) args(2),
		function isConvertibleToDynamic( --- ) args(1),
		[server] function setConvertibleToDynamic( ---, Number ) args(2),
		[userdata] function getId( Body ) args(1),
		[userdata] [server] function getCreationId( --- ) args(1),
		[userdata] function getMass( --- ) args(1),
		[userdata] function getWorldPosition( --- ) args(1),
		[userdata] function getVelocity( --- ) args(1),
		[userdata] function getAngularVelocity( --- ) args(1),
		[userdata] function getShapes( --- ) args(1),
		[userdata] function getCreationShapes( --- ) args(1),
		[userdata] function getCreationBodies( --- ) args(1),
		[userdata] [server] function createPart() args(?),
		[userdata] [server] function createBlock() args(?),
		[userdata] [server] function hasChanged( ---, Integer ) args(2),
		[userdata] function isDynamic( --- ) args(1),
		[userdata] function isStatic( --- ) args(1),
		[userdata] function isOnLift( --- ) args(1),
		[userdata] function isDestructable( --- ) args(1),
		[userdata] [server] function setDestructable( ---, Number ) args(2),
		[userdata] function isBuildable( --- ) args(1),
		[userdata] [server] function setBuildable( ---, Number ) args(2),
		[userdata] function isPaintable( --- ) args(1),
		[userdata] [server] function setPaintable( ---, Number ) args(2),
		[userdata] function isConnectable( --- ) args(1),
		[userdata] [server] function setConnectable( ---, Number ) args(2),
		[userdata] function isLiftable( --- ) args(1),
		[userdata] [server] function setLiftable( ---, Number ) args(2),
		[userdata] function isUsable( --- ) args(1),
		[userdata] [server] function setUsable( ---, Number ) args(2),
		[userdata] function isErasable( --- ) args(1),
		[userdata] [server] function setErasable( ---, Number ) args(2),
		[userdata] function isConvertibleToDynamic( --- ) args(1),
		[userdata] [server] function setConvertibleToDynamic( ---, Number ) args(2),
		[userdata] [server] function getAllSeatedCharacter( --- ) args(1),
		[userdata] function getCenterOfMassPosition( --- ) args(1),
		[userdata] function getWorld( --- ) args(1),
		[userdata] function getLocalAabb( --- ) args(1),
		[userdata] function getWorldAabb( --- ) args(1),
		[userdata] function transformPoint( ---, Vec3 ) args(2),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Body, Body ) args(2)
	},
	interactable = {
		types = nil,
		connectionType = nil,
		actions = nil,
		steering = nil,
		function getId( Interactable ) args(1),
		function getType( --- ) args(1),
		function getColorNormal( --- ) args(1),
		function getColorHighlight( --- ) args(1),
		function getMaxParentCount( --- ) args(1),
		function getMaxChildCount( --- ) args(1),
		function isActive( --- ) args(1),
		function setActive( ---, Number ) args(2),
		function getPower( --- ) args(1),
		function setPower( ---, [Number, String] ) args(2),
		function getPublicData( --- ) args(1),
		function setPublicData( ---, Table ) args(2),
		function getShape( --- ) args(1),
		function getConnectionInputType( --- ) args(1),
		function getConnectionOutputType( --- ) args(1),
		function getBody( --- ) args(1),
		function getSingleParent( --- ) args(1),
		function getParents( ---, Integer ) args(1,2),
		function getChildren( ---, Integer ) args(1,2),
		function getJoints( --- ) args(1),
		function getBearings( --- ) args(1),
		function getPistons( --- ) args(1),
		function getPoseWeight( ---, Integer ) args(2),
		function setPoseWeight( ---, Integer, [Number, String] ) args(3),
		function getGlowMultiplier( --- ) args(1),
		function setGlowMultiplier( ---, [Number, String] ) args(2),
		function getUvFrameIndex( --- ) args(1),
		function setUvFrameIndex( ---, Integer ) args(2),
		function hasAnim( ---, String ) args(2),
		function setAnimProgress( ---, String, [Number, String] ) args(3),
		function setAnimEnabled( ---, String, Number ) args(3),
		function getAnimDuration( ---, String ) args(2),
		function getLocalBonePosition( ---, String ) args(2),
		function getWorldBonePosition( ---, String ) args(2),
		function getContainer( ---, Integer ) args(1,2),
		function connect( ---, --- ) args(2),
		function disconnect( ---, --- ) args(2),
		function addContainer() args(?),
		function removeContainer( ---, Integer ) args(2),
		function setParams( ---, --- ) args(2),
		[userdata] function getId( Interactable ) args(1),
		[userdata] function getType( --- ) args(1),
		[userdata] function getColorNormal( --- ) args(1),
		[userdata] function getColorHighlight( --- ) args(1),
		[userdata] function getMaxParentCount( --- ) args(1),
		[userdata] function getMaxChildCount( --- ) args(1),
		[userdata] function isActive( --- ) args(1),
		[userdata] function setActive( ---, Number ) args(2),
		[userdata] function getPower( --- ) args(1),
		[userdata] function setPower( ---, [Number, String] ) args(2),
		[userdata] function getPublicData( --- ) args(1),
		[userdata] function setPublicData( ---, Table ) args(2),
		[userdata] function hasOutputType( ---, Integer ) args(2),
		[userdata] function getShape( --- ) args(1),
		[userdata] function getConnectionInputType( --- ) args(1),
		[userdata] function getConnectionOutputType( --- ) args(1),
		[userdata] function getBody( --- ) args(1),
		[userdata] function getSingleParent( --- ) args(1),
		[userdata] function getParents( ---, Integer ) args(1,2),
		[userdata] function getChildren( ---, Integer ) args(1,2),
		[userdata] function getJoints( --- ) args(1),
		[userdata] function getBearings( --- ) args(1),
		[userdata] function getPistons( --- ) args(1),
		[userdata] function getPoseWeight( ---, Integer ) args(2),
		[userdata] function setPoseWeight( ---, Integer, [Number, String] ) args(3),
		[userdata] function getGlowMultiplier( --- ) args(1),
		[userdata] function setGlowMultiplier( ---, [Number, String] ) args(2),
		[userdata] function getUvFrameIndex( --- ) args(1),
		[userdata] function setUvFrameIndex( ---, Integer ) args(2),
		[userdata] function hasAnim( ---, String ) args(2),
		[userdata] function setAnimProgress( ---, String, [Number, String] ) args(3),
		[userdata] function setAnimEnabled( ---, String, Number ) args(3),
		[userdata] function getAnimDuration( ---, String ) args(2),
		[userdata] function getLocalBonePosition( ---, String ) args(2),
		[userdata] function getWorldBonePosition( ---, String ) args(2),
		[userdata] function getContainer( ---, Integer ) args(1,2),
		[userdata] function connect( ---, --- ) args(2),
		[userdata] function disconnect( ---, --- ) args(2),
		[userdata] function connectToJoint( ---, --- ) args(2),
		[userdata] function addContainer() args(?),
		[userdata] function removeContainer( ---, Integer ) args(2),
		[userdata] function setParams( ---, --- ) args(2),
		[userdata] function hasSeat( --- ) args(1),
		[userdata] function setSeatCharacter( ---, --- ) args(2),
		[userdata] function getSeatCharacter( --- ) args(1),
		[userdata] function getSeatInteractables( --- ) args(1),
		[userdata] function pressSeatInteractable( ---, Integer ) args(2),
		[userdata] function releaseSeatInteractable( ---, Integer ) args(2),
		[userdata] function hasSteering( --- ) args(1),
		[userdata] function setSteeringFlag( ---, Integer ) args(2),
		[userdata] function unsetSteeringFlag( ---, Integer ) args(2),
		[userdata] function getSteeringPower( --- ) args(1),
		[userdata] function getSteeringAngle( --- ) args(1),
		[userdata] function getSteeringJointLeftAngleSpeed( ---, --- ) args(2),
		[userdata] function getSteeringJointRightAngleSpeed( ---, --- ) args(2),
		[userdata] function getSteeringJointLeftAngleLimit( ---, --- ) args(2),
		[userdata] function getSteeringJointRightAngleLimit( ---, --- ) args(2),
		[userdata] function getSteeringJointUnlocked( ---, --- ) args(2),
		[userdata] function getSteeringJointSettings( ---, --- ) args(2),
		[userdata] function setSteeringJointLeftAngleSpeed( ---, ---, [Number, String] ) args(3),
		[userdata] function setSteeringJointRightAngleSpeed( ---, ---, [Number, String] ) args(3),
		[userdata] function setSteeringJointLeftAngleLimit( ---, ---, [Number, String] ) args(3),
		[userdata] function setSteeringJointRightAngleLimit( ---, ---, [Number, String] ) args(3),
		[userdata] function setSteeringJointUnlocked( ---, ---, Number ) args(3),
		[userdata] function setSteeringJointSettings( ---, ---, [Number, String], [Number, String], [Number, String], [Number, String], Number ) args(7),
		[userdata] function setSubMeshVisible( ---, String, Number ) args(3),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Interactable, Interactable ) args(2)
	},
	joint = {
		types = nil,
		[server] function createPart() args(?),
		[server] function createBlock() args(?),
		function getId( Joint ) args(1),
		function getType( --- ) args(1),
		function getShapeA( --- ) args(1),
		function getShapeB( --- ) args(1),
		function getColor( --- ) args(1),
		function getAngle( --- ) args(1),
		function getAngularVelocity( --- ) args(1),
		function getAppliedImpulse( --- ) args(1),
		function isReversed( --- ) args(1),
		function setMotorVelocity( ---, [Number, String], [Number, String] ) args(3),
		function setTargetAngle( ---, [Number, String], [Number, String], [Number, String] ) args(4),
		function getLength( --- ) args(1),
		[server] function setTargetLength( ---, [Number, String], [Number, String], [Number, String] ) args(3,4),
		[userdata] [server] function createPart() args(?),
		[userdata] [server] function createBlock() args(?),
		[userdata] function getId( Joint ) args(1),
		[userdata] function getType( --- ) args(1),
		[userdata] function getShapeA( --- ) args(1),
		[userdata] function getShapeB( --- ) args(1),
		[userdata] function getColor( --- ) args(1),
		[userdata] function getAngle( --- ) args(1),
		[userdata] function getAngularVelocity( --- ) args(1),
		[userdata] function getAppliedImpulse( --- ) args(1),
		[userdata] function isReversed( --- ) args(1),
		[userdata] function setMotorVelocity( ---, [Number, String], [Number, String] ) args(3),
		[userdata] function setTargetAngle( ---, [Number, String], [Number, String], [Number, String] ) args(4),
		[userdata] function getLength( --- ) args(1),
		[userdata] [server] function setTargetLength( ---, [Number, String], [Number, String], [Number, String] ) args(3,4),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Joint, Joint ) args(2)
	},
	container = {
		[server] function beginTransaction() args(0),
		[server] function endTransaction() args(0),
		[server] function abortTransaction() args(0),
		function getSize( --- ) args(1),
		function getMaxStackSize( --- ) args(1),
		[server] function setItem() args(?),
		function getItem( ---, Integer ) args(2),
		function getFirstItem( --- ) args(1),
		[server] function hasChanged( ---, Integer ) args(2),
		function isEmpty( --- ) args(1),
		function getId( Container ) args(1),
		function quantity( --- ) args(1),
		function totalQuantity( ---, Uuid ) args(2),
		function itemUuid( --- ) args(1),
		[server] function swap( ---, Integer, ---, Integer ) args(4),
		[server] function spendFromSlot() args(?),
		[server] function spend() args(?),
		[server] function collectToSlot() args(?),
		[server] function collect() args(?),
		function canCollect( ---, Uuid, Integer ) args(3),
		function canSpend( ---, Uuid, Integer ) args(3),
		function moveAll( ---, --- ) args(2),
		[server] function setFilters( ---, Table ) args(2),
		[userdata] function getSize( --- ) args(1),
		[userdata] function getMaxStackSize( --- ) args(1),
		[userdata] [server] function setItem() args(?),
		[userdata] function getItem( ---, Integer ) args(2),
		[userdata] [server] function hasChanged( ---, Integer ) args(2),
		[userdata] function isEmpty( --- ) args(1),
		[userdata] [server] function setAllowCollect( ---, Number ) args(2),
		[userdata] [server] function getAllowCollect( --- ) args(1),
		[userdata] [server] function setAllowSpend( ---, Number ) args(2),
		[userdata] [server] function getAllowSpend( --- ) args(1),
		[userdata] function canCollect( ---, Uuid, Integer ) args(3),
		[userdata] function canSpend( ---, Uuid, Integer ) args(3),
		[userdata] [server] function setFilters( ---, Table ) args(2),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Container, Container ) args(2)
	},
	quest = {
		[server] function addQuest( Uuid ) args(1),
		function getQuest( Uuid ) args(1),
		function getQuestById( Integer ) args(1),
		function getActiveQuests() args(0),
		[server] function removeQuest( Quest ) args(1),
		[server] function completeQuest( Quest ) args(1),
		function getIsRepeatable( Uuid ) args(1),
		function getHasCompleted( Uuid ) args(1),
		[userdata] function getUuid( Quest ) args(1),
		[userdata] function getObjectives( Quest ) args(1),
		[userdata] function getRewards( Quest ) args(1),
		[userdata] function getDescription( Quest ) args(1),
		[userdata] [server] function remove( Quest ) args(1),
		[userdata] [server] function complete( Quest ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Quest, Quest ) args(2)
	},
	harvestable = {
		function getId( Harvestable ) args(1),
		function getType( --- ) args(1),
		function getName( --- ) args(1),
		function getMaterial( --- ) args(1),
		function getMaterialId( --- ) args(1),
		function destroy( --- ) args(1),
		function create() args(?),
		function getPosition( --- ) args(1),
		function getRotation( --- ) args(1),
		function getPoseWeight( ---, Integer ) args(2),
		function setPoseWeight( ---, Integer, [Number, String] ) args(3),
		function getColor( --- ) args(1),
		function setColor( ---, Color ) args(2),
		function getUvFrameIndex( --- ) args(1),
		function setUvFrameIndex( ---, Integer ) args(2),
		function setParams( ---, --- ) args(2),
		function getPublicData( --- ) args(1),
		function setPublicData( ---, Table ) args(2),
		[userdata] function getId( Harvestable ) args(1),
		[userdata] function getType( --- ) args(1),
		[userdata] function getName( --- ) args(1),
		[userdata] function getMaterial( --- ) args(1),
		[userdata] function getMaterialId( --- ) args(1),
		[userdata] function destroy( --- ) args(1),
		[userdata] function getPosition( --- ) args(1),
		[userdata] function getRotation( --- ) args(1),
		[userdata] function getPoseWeight( ---, Integer ) args(2),
		[userdata] function setPoseWeight( ---, Integer, [Number, String] ) args(3),
		[userdata] function getColor( --- ) args(1),
		[userdata] function setColor( ---, Color ) args(2),
		[userdata] function getUvFrameIndex( --- ) args(1),
		[userdata] function setUvFrameIndex( ---, Integer ) args(2),
		[userdata] function setParams( ---, --- ) args(2),
		[userdata] function getUuid( --- ) args(1),
		[userdata] function getAabb( --- ) args(1),
		[userdata] function setParams( ---, --- ) args(2),
		[userdata] function getData( --- ) args(1),
		[userdata] function getPublicData( --- ) args(1),
		[userdata] function setPublicData( ---, Table ) args(2),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Harvestable, Harvestable ) args(2)
	},
	world = {
		[server] function createWorld() args(?),
		[server] function loadWorld( World ) args(1),
		[server] function destroyWorld( World ) args(1),
		function getCurrentWorld() args(?),
		function getId( World ) args(1),
		function isIndoor( World ) args(1),
		[server] function loadCell( World, Integer, Integer, ---, String, ---, --- ) args(4,7),
		[userdata] [server] function destroy( World ) args(1),
		[userdata] function getId( World ) args(1),
		[userdata] function isIndoor( World ) args(1),
		[userdata] [server] function loadCell( World, Integer, Integer, ---, String, ---, --- ) args(4,7),
		[userdata] function setTerrainScriptData( World, --- ) args(2),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( World, World ) args(2)
	},
	character = {
		function createCharacter() args(?),
		[userdata] function getId( Character ) args(1),
		[userdata] function getWorldPosition( --- ) args(1),
		[userdata] function getVelocity( --- ) args(1),
		[userdata] function getDirection( --- ) args(1),
		[userdata] function getMass( --- ) args(1),
		[userdata] function getHeight( --- ) args(1),
		[userdata] function getPlayer( --- ) args(1),
		[userdata] function getUnit( --- ) args(1),
		[userdata] function getWorld( --- ) args(1),
		[userdata] function isPlayer( --- ) args(1),
		[userdata] function getRadius( --- ) args(1),
		[userdata] function getGlowMultiplier( --- ) args(1),
		[userdata] function setGlowMultiplier( ---, [Number, String] ) args(2),
		[userdata] function bindAnimationCallback( ---, String, [Number, String], String ) args(4),
		[userdata] function removeAnimationCallbacks( --- ) args(1),
		[userdata] function addRenderable( ---, String ) args(2),
		[userdata] function removeRenderable( ---, String ) args(2),
		[userdata] function getAnimationInfo( ---, String ) args(2),
		[userdata] function updateAnimation( ---, String, [Number, String], [Number, String], Number ) args(3,5),
		[userdata] function setMovementWeights( ---, [Number, String], [Number, String] ) args(3),
		[userdata] function setAllowTumbleAnimations( ---, Number ) args(2),
		[userdata] function setDowned( ---, Number ) args(2),
		[userdata] function isDowned( --- ) args(1),
		[userdata] function setSwimming( ---, Number ) args(2),
		[userdata] function isSwimming( --- ) args(1),
		[userdata] function setDiving( ---, Number ) args(2),
		[userdata] function isDiving( --- ) args(1),
		[userdata] function setTumbling( ---, Number ) args(2),
		[userdata] function isTumbling( --- ) args(1),
		[userdata] function applyTumblingImpulse( ---, Vec3 ) args(2),
		[userdata] function getTumblingWorldPosition( --- ) args(1),
		[userdata] function getTumblingWorldRotation( --- ) args(1),
		[userdata] function getTumblingExtent( --- ) args(1),
		[userdata] function getTumblingLinearVelocity( --- ) args(1),
		[userdata] function getTumblingMass( --- ) args(1),
		[userdata] function getCanSwim( --- ) args(1),
		[userdata] function getActiveAnimations( --- ) args(1),
		[userdata] function getTpBonePos( ---, String ) args(2),
		[userdata] function getTpBoneRot( ---, String ) args(2),
		[userdata] function setMovementEffects( ---, String ) args(2),
		[userdata] function setMovementSpeedFraction( ---, [Number, String] ) args(2),
		[userdata] function getMovementSpeedFraction( --- ) args(1),
		[userdata] function setLockingInteractable( ---, --- ) args(2),
		[userdata] function getLockingInteractable( --- ) args(1),
		[userdata] function getCurrentMovementNoiseRadius( --- ) args(1),
		[userdata] function isSprinting( --- ) args(1),
		[userdata] function isAiming( --- ) args(1),
		[userdata] function isCrouching( --- ) args(1),
		[userdata] function getCurrentMovementSpeed( --- ) args(1),
		[userdata] function isOnGround( --- ) args(1),
		[userdata] function getCharacterType( --- ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Character, Character ) args(2)
	},
	player = {
		function getAllPlayers() args(0),
		[server] function placeLift( ---, Table, Vec3, Integer, Integer ) args(5),
		[server] function removeLift( --- ) args(1),
		[userdata] function getId( Player ) args(1),
		[userdata] function getCharacter( --- ) args(1),
		[userdata] [server] function setCharacter( ---, --- ) args(2),
		[userdata] function getName( --- ) args(1),
		[userdata] function getInventory( --- ) args(1),
		[userdata] [server] function placeLift( ---, Table, Vec3, Integer, Integer ) args(5),
		[userdata] [server] function removeLift( --- ) args(1),
		[userdata] [server] function sendCharacterEvent( ---, String ) args(2),
		[userdata] function isMale( --- ) args(1),
		[userdata] [server] function getCarry( --- ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Player, Player ) args(2)
	},
	unit = {
		[server] function createUnit() args(?),
		[server] function getAllUnits() args(0),
		[userdata] function destroy( --- ) args(1),
		[userdata] function getId( Unit ) args(1),
		[userdata] function setWhiskerData( ---, Integer, [Number, String], [Number, String], [Number, String] ) args(5),
		[userdata] function setHearingData( ---, [Number, String] ) args(2),
		[userdata] function createState( ---, String ) args(2),
		[userdata] function setMovementDirection( ---, Vec3 ) args(2),
		[userdata] function setFacingDirection( ---, Vec3 ) args(2),
		[userdata] function setMovementType( ---, String ) args(2),
		[userdata] function setWantsJump( ---, Number ) args(2),
		[userdata] function getCurrentMovementDirection( --- ) args(1),
		[userdata] function getCurrentFacingDirection( --- ) args(1),
		[userdata] function sendCharacterEvent( ---, String ) args(2),
		[userdata] function getCharacter( --- ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Unit, Unit ) args(2)
	},
	aiState = {
		[userdata] function start( AiState ) args(1),
		[userdata] function stop( AiState ) args(1),
		[userdata] function onFixedUpdate( AiState, [Number, String] ) args(2),
		[userdata] function onUnitUpdate( AiState, [Number, String] ) args(2),
		[userdata] function isDone( AiState ) args(1),
		[userdata] function getMovementDirection( AiState ) args(1),
		[userdata] function getFacingDirection( AiState ) args(1),
		[userdata] function getMovementType( AiState ) args(1),
		[userdata] function getWantsJump( AiState ) args(1),
		function __newindex( AiState, String, --- ) args(3),
		function __index( AiState, String ) args(2),
		function __eq( AiState, AiState ) args(2),
		function __gc() args(?)
	},
	areaTrigger = {
		filter = nil,
		function createBox( Vec3, Vec3, Quat, Integer, --- ) args(2,5),
		function createBoxWater( Vec3, Vec3, Quat, Integer, --- ) args(2,5),
		function createAttachedBox( ---, Vec3, Vec3, Quat, Integer, --- ) args(2,6),
		function destroy( AreaTrigger ) args(1),
		[userdata] function getId( AreaTrigger ) args(1),
		[userdata] function bindOnEnter( AreaTrigger, String, --- ) args(2,3),
		[userdata] function bindOnExit( AreaTrigger, String, --- ) args(2,3),
		[userdata] function bindOnStay( AreaTrigger, String, --- ) args(2,3),
		[userdata] function bindOnProjectile( AreaTrigger, String, --- ) args(2,3),
		[userdata] function getContents( AreaTrigger ) args(1),
		[userdata] function getWorldMin( AreaTrigger ) args(1),
		[userdata] function getWorldMax( AreaTrigger ) args(1),
		[userdata] function getWorldPosition( AreaTrigger ) args(1),
		[userdata] function setWorldPosition( AreaTrigger, Vec3 ) args(2),
		[userdata] function setSize( AreaTrigger, Vec3 ) args(2),
		[userdata] function getSize( AreaTrigger ) args(1),
		[userdata] function getHostInteractable( AreaTrigger ) args(1),
		[userdata] function getUserData( AreaTrigger ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( AreaTrigger, AreaTrigger ) args(2),
		function __gc( AreaTrigger ) args(1)
	},
	portal = {
		[server] function createPortal( Vec3 ) args(1),
		[server] function destroy( --- ) args(1),
		[server] function addWorldPortalHook( World, String, --- ) args(3),
		[server] function popWorldPortalHook( String ) args(1),
		[userdata] [server] function getId( Portal ) args(1),
		[userdata] [server] function hasOpeningA( --- ) args(1),
		[userdata] [server] function hasOpeningB( --- ) args(1),
		[userdata] [server] function setOpeningA( ---, Vec3, Quat ) args(3),
		[userdata] [server] function setOpeningB( ---, Vec3, Quat ) args(3),
		[userdata] [server] function getPositionA( --- ) args(1),
		[userdata] [server] function getPositionB( --- ) args(1),
		[userdata] [server] function getRotationA( --- ) args(1),
		[userdata] [server] function getRotationB( --- ) args(1),
		[userdata] [server] function getWorldA( --- ) args(1),
		[userdata] [server] function getWorldB( --- ) args(1),
		[userdata] [server] function getContentsA( --- ) args(1),
		[userdata] [server] function getContentsB( --- ) args(1),
		[userdata] [server] function transferAToB( --- ) args(1),
		[userdata] [server] function transferBToA( --- ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Portal, Portal ) args(2)
	},
	lift = {
		[userdata] function getId( Lift ) args(1),
		[userdata] function getWorldPosition( --- ) args(1),
		[userdata] function getLevel( --- ) args(1),
		[userdata] function hasBodies( --- ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Lift, Lift ) args(2)
	},
	vec3 = {
		function new( [Number, String], [Number, String], [Number, String] ) args(3),
		function zero() args(0),
		function one() args(0),
		function getX( Vec3 ) args(1),
		function setX( Vec3, [Number, String] ) args(2),
		function getY( Vec3 ) args(1),
		function setY( Vec3, [Number, String] ) args(2),
		function getZ( Vec3 ) args(1),
		function setZ( Vec3, [Number, String] ) args(2),
		function normalize( Vec3 ) args(1),
		function dot( Vec3, Vec3 ) args(2),
		function cross( Vec3, Vec3 ) args(2),
		function length( Vec3 ) args(1),
		function length2( Vec3 ) args(1),
		function lerp( Vec3, Vec3, [Number, String] ) args(3),
		function bezier2( Vec3, Vec3, Vec3, [Number, String] ) args(4),
		function bezier3( Vec3, Vec3, Vec3, Vec3, [Number, String] ) args(5),
		function rotateX( Vec3, [Number, String] ) args(2),
		function rotateY( Vec3, [Number, String] ) args(2),
		function rotateZ( Vec3, [Number, String] ) args(2),
		function rotate( Vec3, [Number, String], Vec3 ) args(3),
		function getRotation( Vec3, Vec3 ) args(2),
		function closestAxis( Vec3 ) args(1),
		[userdata] function normalize( Vec3 ) args(1),
		[userdata] function dot( Vec3, Vec3 ) args(2),
		[userdata] function cross( Vec3, Vec3 ) args(2),
		[userdata] function length( Vec3 ) args(1),
		[userdata] function length2( Vec3 ) args(1),
		[userdata] function rotateX( Vec3, [Number, String] ) args(2),
		[userdata] function rotateY( Vec3, [Number, String] ) args(2),
		[userdata] function rotateZ( Vec3, [Number, String] ) args(2),
		[userdata] function rotate( Vec3, [Number, String], Vec3 ) args(3),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __unm( Vec3, Vec3 ) args(2),
		function __add( Vec3, Vec3 ) args(2),
		function __sub( Vec3, Vec3 ) args(2),
		function __div( Vec3, [Vec3, Number, String] ) args(2),
		function __mul( Vec3, [Vec3, Number, String] ) args(2),
		function __lt( Vec3, Vec3 ) args(2),
		function __eq( Vec3, Vec3 ) args(2),
		function __tostring( Vec3 ) args(1)
	},
	quat = {
		function new( [Number, String], [Number, String], [Number, String], [Number, String] ) args(4),
		function identity() args(?),
		function angleAxis( [Number, String], Vec3 ) args(2),
		function getX( Quat ) args(1),
		function setX( Quat, [Number, String] ) args(2),
		function getY( Quat ) args(1),
		function setY( Quat, [Number, String] ) args(2),
		function getZ( Quat ) args(1),
		function setZ( Quat, [Number, String] ) args(2),
		function getW( Quat ) args(1),
		function setW( Quat, [Number, String] ) args(2),
		function round90( Quat ) args(1),
		function lookRotation( Vec3, Vec3 ) args(2),
		function slerp( Quat, Quat, [Number, String] ) args(3),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __mul( Quat, [Quat, Vec3] ) args(2),
		function __eq( Quat, Quat ) args(2)
	},
	uuid = {
		function new( String ) args(0,1),
		function getNil() args(0),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __tostring( Uuid ) args(1),
		function __eq( Uuid, Uuid ) args(2)
	},
	color = {
		function new() args(?),
		function getR( Color ) args(1),
		function getG( Color ) args(1),
		function getB( Color ) args(1),
		function getA( Color ) args(1),
		function setR( Color, [Number, String] ) args(2),
		function setG( Color, [Number, String] ) args(2),
		function setB( Color, [Number, String] ) args(2),
		function setA( Color, [Number, String] ) args(2),
		[userdata] function getHexStr( Color ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __add( Color, Color ) args(2),
		function __sub( Color, Color ) args(2),
		function __div( Color, [Color, Number, String] ) args(2),
		function __mul( Color, [Color, Number, String] ) args(2),
		function __eq( Color, Color ) args(2),
		function __tostring( Color ) args(1)
	},
	raycastResult = {
		[userdata] function getBody( RaycastResult ) args(1),
		[userdata] function getShape( RaycastResult ) args(1),
		[userdata] function getCharacter( RaycastResult ) args(1),
		[userdata] function getJoint( RaycastResult ) args(1),
		[userdata] function getLiftData( RaycastResult ) args(1),
		[userdata] function getHarvestable( RaycastResult ) args(1),
		[userdata] function getAreaTrigger( RaycastResult ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2)
	},
	pathfinder = {
		conditionProperty = nil,
		function getPath( ---, Vec3, Number, Table ) args(2,4),
		function getSortedNodes( Vec3, [Number, String], [Number, String] ) args(3)
	},
	pathNode = {
		function createPathNode( Vec3, [Number, String] ) args(2),
		[userdata] function destroy() args(?),
		[userdata] function connect( ---, ---, Table, Table, [Number, String] ) args(2,5),
		[userdata] function getPosition( --- ) args(1),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		[server] function __eq( PathNode, PathNode ) args(2)
	},
	gui = {
		widget = {
			function getId() args(?),
			function getName() args(?),
			function getTypeName() args(?),
			function getPosition() args(?),
			function setPosition() args(?),
			function getVisible() args(?),
			function setVisible() args(?),
			function getSize() args(?),
			function setSize() args(?),
			function getText() args(?),
			function setText() args(?),
			function destroy() args(?),
			function find() args(?),
			function bindOnClick() args(?),
			[userdata] function find() args(?),
			[userdata] function getName() args(?),
			[userdata] function getTypeName() args(?),
			[userdata] function getPosition() args(?),
			[userdata] function setPosition() args(?),
			[userdata] function getVisible() args(?),
			[userdata] function setVisible() args(?),
			[userdata] function getSize() args(?),
			[userdata] function setSize() args(?),
			[userdata] function getText() args(?),
			[userdata] function setText() args(?),
			[userdata] function find() args(?),
			[userdata] function bindOnClick() args(?),
			function __newindex( ---, String, --- ) args(3),
			function __index( ---, String ) args(2),
			function __eq( Widget, Widget ) args(2)
		},
		interface = {
			[userdata] [client] function destroy( GuiInterface ) args(1),
			[userdata] [client] function open( GuiInterface ) args(1),
			[userdata] [client] function close( GuiInterface ) args(1),
			[userdata] [client] function isActive( GuiInterface ) args(1),
			[userdata] [client] function setText( GuiInterface, String, String ) args(3),
			[userdata] [client] function setVisible( GuiInterface, String, Boolean ) args(3),
			[userdata] [client] function setColor( GuiInterface, String, Color ) args(3),
			[userdata] [client] function setImage( GuiInterface, String, String ) args(3),
			[userdata] [client] function setItemIcon( GuiInterface, String, String, String, String ) args(5),
			[userdata] [client] function setIconImage( GuiInterface, String, Uuid ) args(3),
			[userdata] [client] function setButtonState( GuiInterface, String, Boolean ) args(3),
			[userdata] [client] function setSliderRange( GuiInterface, String, Integer ) args(3),
			[userdata] [client] function setSliderPosition( GuiInterface, String, Integer ) args(3),
			[userdata] [client] function setSliderRangeLimit( GuiInterface, String, Integer ) args(3),
			[userdata] [client] function setSliderData( GuiInterface, String, Integer, Integer ) args(4),
			[userdata] [client] function clearList( GuiInterface, String ) args(2),
			[userdata] [client] function addListItem( GuiInterface, String, String, --- ) args(4),
			[userdata] [client] function setSelectedListItem( GuiInterface, String, String ) args(3),
			[userdata] [client] function clearGrid( GuiInterface, String ) args(2),
			[userdata] [client] function addGridItemsFromFile( GuiInterface, String, String, --- ) args(3,4),
			[userdata] [client] function addGridItem( GuiInterface, String, --- ) args(3),
			[userdata] [client] function setGridItem( GuiInterface, String, Integer, --- ) args(4),
			[userdata] [client] function setGridSize( GuiInterface, String, Integer ) args(3),
			[userdata] [client] function setContainer( GuiInterface, String, --- ) args(3),
			[userdata] [client] function setContainers( GuiInterface, String, Table ) args(3),
			[userdata] [client] function setData( GuiInterface, String, --- ) args(3),
			[userdata] [client] function setHost( GuiInterface, ---, String ) args(2,3),
			[userdata] [client] function setWorldPosition( GuiInterface, Vec3, World ) args(2,3),
			[userdata] [client] function setMaxRenderDistance( GuiInterface, [Number, String] ) args(2),
			[userdata] [client] function setFadeRange( GuiInterface, [Number, String] ) args(2),
			[userdata] [client] function setRequireLineOfSight( GuiInterface, Boolean ) args(2),
			[userdata] [client] function setOnCloseCallback( GuiInterface, String ) args(2),
			[userdata] [client] function setButtonCallback( GuiInterface, String, String ) args(3),
			[userdata] [client] function setSliderCallback( GuiInterface, String, String ) args(3),
			[userdata] [client] function setGridButtonCallback( GuiInterface, String, String ) args(3),
			[userdata] [client] function setGridItemChangedCallback( GuiInterface, String, String ) args(3),
			[userdata] [client] function setListSelectionCallback( GuiInterface, String, String ) args(3),
			function __newindex( ---, String, --- ) args(3),
			function __index( ---, String ) args(2),
			function __eq( GuiInterface, GuiInterface ) args(2),
			function __gc( GuiInterface ) args(1)
		},
		function createWidget() args(?),
		[client] function getScreenSize() args(0),
		[client] function createGuiFromLayout() args(?),
		[client] function createContainerGui( Number ) args(0,1),
		[client] function createWorkbenchGui() args(?),
		[client] function createCookBotGui() args(?),
		[client] function createCraftBotGui() args(?),
		[client] function createMechanicStationGui() args(?),
		[client] function createSurvivalHudGui() args(?),
		[client] function createHideoutGui() args(?),
		[client] function createDressBotGui() args(?),
		[client] function createEngineGui() args(?),
		[client] function createSeatGui() args(?),
		[client] function createNameTagGui() args(?),
		[client] function createBagIconGui() args(?),
		[client] function createBeaconIconGui() args(?),
		[client] function createWaypointIconGui() args(?),
		[client] function createAmmunitionContainerGui() args(?),
		[client] function createBatteryContainerGui() args(?),
		[client] function createChemicalContainerGui() args(?),
		[client] function createFertilizerContainerGui() args(?),
		[client] function createGasContainerGui() args(?),
		[client] function createSeedContainerGui() args(?),
		[client] function createWaterContainerGui() args(?),
		[client] function createSeatUpgradeGui() args(?),
		[client] function createSteeringBearingGui() args(?),
		[client] function createChallengeHUDGui() args(?),
		[client] function createChallengeMessageGui() args(?),
		[client] function createLogbookGui() args(?),
		[client] function displayAlertText( String, [Number, String] ) args(1,2),
		[client] function hideGui( Number ) args(1),
		[client] function getKeyBinding( String ) args(1),
		[client] function setInteractionText( ---, ---, ---, ---, --- ) args(1,5),
		[client] function setCenterIcon( String ) args(1),
		[client] function setProgressFraction( [Number, String] ) args(1),
		[client] function createCharacterCustomizationGui() args(?),
		[client] function setCharacterDebugText( ---, String, Number ) args(2,3),
		[client] function exitToMenu() args(0),
		function chatMessage( String ) args(1)
	},
	audio = {
		soundList = nil,
		[client] function play( String, Vec3 ) args(1,2)
	},
	effect = {
		function playEffect( String, Vec3, Vec3, Quat, Vec3, Table ) args(2,6),
		[client] function playHostedEffect( String, ---, String, Table ) args(2,4),
		[client] function createEffect() args(?),
		[client] function createEffect2D( --- ) args(1),
		[userdata] function getId( Effect ) args(1),
		[userdata] [client] function start( Effect ) args(1),
		[userdata] [client] function stop( Effect ) args(1),
		[userdata] [client] function stopImmediate( Effect ) args(1),
		[userdata] function destroy( Effect ) args(1),
		[userdata] [client] function isPlaying( Effect ) args(1),
		[userdata] [client] function setPosition( Effect, Vec3 ) args(2),
		[userdata] [client] function setScale( Effect, Vec3 ) args(2),
		[userdata] [client] function setVelocity( Effect, Vec3 ) args(2),
		[userdata] [client] function setRotation( Effect, Quat ) args(2),
		[userdata] [client] function setOffsetPosition( Effect, Vec3 ) args(2),
		[userdata] [client] function setOffsetRotation( Effect, Quat ) args(2),
		[userdata] [client] function setParameter( Effect, String, [Color, Quat, Vec3, Uuid, String, Number] ) args(3),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2),
		function __eq( Effect, Effect ) args(2),
		function __gc( Effect ) args(1)
	},
	particle = {
		[client] function createParticle( String, Vec3, Quat, Color ) args(2,4)
	},
	tool = {
		interactState = nil,
		function checkLiftCollision() args(?),
		[client] function preloadRenderables( Table ) args(1),
		[client] function forceTool( --- ) args(1),
		[userdata] function getId( Tool ) args(1),
		[userdata] function getOwner( Tool ) args(1),
		[userdata] [client] function updateAnimation( Tool, String, [Number, String], [Number, String] ) args(3,4),
		[userdata] [client] function setMovementAnimation( Tool, String, String ) args(3),
		[userdata] [client] function updateMovementAnimation( Tool, [Number, String], [Number, String] ) args(2,3),
		[userdata] [client] function getAnimationInfo( Tool, String ) args(2),
		[userdata] [client] function updateJoint( Tool, String, Vec3, [Number, String] ) args(3,4),
		[userdata] [client] function updateCamera( Tool, [Number, String], [Number, String], Vec3, [Number, String] ) args(5),
		[userdata] [client] function setTpRenderables( Tool, Table ) args(2),
		[userdata] [client] function setTpColor( Tool, Color ) args(2),
		[userdata] [client] function updateFpAnimation( Tool, String, [Number, String], [Number, String], Number ) args(3,5),
		[userdata] [client] function getFpAnimationInfo( Tool, String ) args(2),
		[userdata] [client] function setFpRenderables( Tool, Table ) args(2),
		[userdata] [client] function setFpColor( Tool, Color ) args(2),
		[userdata] [client] function updateFpCamera( Tool, [Number, String], Vec3, [Number, String], [Number, String] ) args(5),
		[userdata] [client] function isCrouching( Tool ) args(1),
		[userdata] [client] function isSprinting( Tool ) args(1),
		[userdata] [client] function isOnGround( Tool ) args(1),
		[userdata] [client] function setBlockSprint( Tool, Number ) args(2),
		[userdata] [client] function setMovementSlowDown( Tool, Number ) args(2),
		[userdata] [client] function isLocal( Tool ) args(1),
		[userdata] [client] function isInFirstPersonView( Tool ) args(1),
		[userdata] [client] function setDispersionFraction( Tool, [Number, String] ) args(2),
		[userdata] [client] function setCrossHairAlpha( Tool, [Number, String] ) args(2),
		[userdata] [client] function setInteractionTextSuppressed( Tool, Number ) args(2),
		[userdata] [client] function getPosition( Tool ) args(1),
		[userdata] [client] function getDirection( Tool ) args(1),
		[userdata] [client] function getMovementVelocity( Tool ) args(1),
		[userdata] [client] function getRelativeMoveDirection( Tool ) args(1),
		[userdata] [client] function getMovementSpeedFraction( Tool ) args(1),
		[userdata] [client] function getCameraWeights( Tool ) args(1),
		[userdata] [client] function getTpBonePos( Tool, String ) args(2),
		[userdata] [client] function getTpBoneDir( Tool, String ) args(2),
		[userdata] [client] function getFpBonePos( Tool, String ) args(2),
		function __newindex( ---, String, --- ) args(3),
		function __index( ---, String ) args(2)
	},
	render = {
		[client] function setOutdoorLighting( [Number, String] ) args(1),
		[client] function getOutdoorLighting() args(?),
		function getScreenCoordinatesFromWorldPosition( Vec3, Integer, Integer ) args(3)
	},
	camera = {
		state = nil,
		[client] function setPosition( Vec3 ) args(1),
		[client] function getPosition() args(0),
		[client] function getDefaultPosition() args(0),
		[client] function setDirection( Vec3 ) args(1),
		[client] function getDirection() args(0),
		[client] function getUp() args(0),
		[client] function getRight() args(0),
		[client] function getFov() args(0),
		[client] function setShake( [Number, String] ) args(1),
		[client] function setCameraState( Integer ) args(1),
		[client] function getCameraState() args(0),
		[client] function setCameraPullback( Integer, Integer ) args(2),
		[client] function cameraSphereCast( [Number, String], Vec3, Vec3 ) args(3)
	},
	localPlayer = {
		[client] function getPlayer() args(0),
		[client] function getId() args(0),
		[client] function getPosition() args(0),
		[client] function getDirection() args(0),
		[client] function getRight() args(0),
		[client] function getUp() args(0),
		[client] function getRaycastStart() args(0),
		[client] function getRaycast() args(?),
		[client] function isInFirstPersonView() args(0),
		[client] function getFpBonePos( String ) args(1),
		[client] function getActiveItem() args(0),
		[client] function getSelectedHotbarSlot() args(0),
		[client] function getCarry() args(0),
		[client] function getInventory() args(0),
		[client] function setDirection( Vec3 ) args(1),
		[client] function getFpAnimationInfo( String ) args(1),
		[client] function updateFpAnimation( String, [Number, String], [Number, String], Number ) args(2,4),
		[client] function addRenderable( String ) args(1),
		[client] function removeRenderable( String ) args(1),
		[client] function setBlockSprinting( Number ) args(1),
		[client] function setLockedControls( Number ) args(1)
	},
	visualization = {
		[client] function setCreationBodies( Table ) args(1),
		[client] function setCreationVisible( Boolean ) args(1),
		[client] function setCreationValid( Boolean ) args(1),
		[client] function setCreationFreePlacement( Boolean ) args(1),
		[client] function setCreationFreePlacementPosition( Vec3 ) args(1),
		[client] function setCreationFreePlacementRotation( Integer ) args(1),
		[client] function setLiftPosition( Vec3 ) args(1),
		[client] function setLiftLevel( Integer ) args(1),
		[client] function setLiftVisible( Boolean ) args(1),
		[client] function setLiftValid( Boolean ) args(1),
		[client] function setBlockVisualization( Vec3, Boolean, --- ) args(1,3)
	},
	terrainTile = {
		function getHeightAt( Integer, Integer, Integer, Integer, Integer, Integer ) args(6),
		function getColorAt( Integer, Integer, Integer, Integer, Integer, Integer ) args(6),
		function getMaterialAt( Integer, Integer, Integer, Integer, Integer, Integer ) args(6),
		function getClutterIdxAt( Integer, Integer, Integer, Integer, Integer ) args(5),
		function getAssetsForCell( Integer, Integer, Integer, Integer ) args(4),
		function getHarvestablesForCell( Integer, Integer, Integer, Integer ) args(4),
		function getCreationsForCell( Integer, Integer, Integer ) args(3),
		function getNodesForCell() args(?),
		function getPrefabsForCell() args(?),
		function getDecalsForCell() args(?),
		function getSize( String ) args(1),
		function getTileUuid( String ) args(1),
		function getCreatorId( String ) args(1),
		function getContentFromPrefab() args(?)
	},
	terrainGeneration = {
		function saveGameStorage( ---, --- ) args(2),
		function loadGameStorage( --- ) args(1)
	}
}