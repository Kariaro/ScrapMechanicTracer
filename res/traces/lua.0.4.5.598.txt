"sm": {
	"raycastResult": {
		[userdata] getBody( Raycastresult ) args:1,
		[userdata] getShape( Raycastresult ) args:1,
		[userdata] getCharacter( Raycastresult ) args:1,
		[userdata] getJoint( Raycastresult ) args:1,
		[userdata] getLiftData( Raycastresult ) args:1,
		[userdata] getHarvestable( Raycastresult ) args:1,
		[userdata] getAreaTrigger( Raycastresult ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
	},
	"shape": {
		function getId( Shape ) args:1,
		function getShapeUuid( Shape ) args:1,
		function getColor( Shape ) args:1,
		function setColor( Shape, Color ) args:2,
		function getMass( Shape ) args:1,
		function getBuoyancy( Shape ) args:1,
		function getMaterial( Shape ) args:1,
		function getWorldPosition( Shape ) args:1,
		function getLocalPosition( Shape ) args:1,
		function getVelocity( Shape ) args:1,
		function getXAxis( Shape ) args:1,
		function getYAxis( Shape ) args:1,
		function getZAxis( Shape ) args:1,
		function getAt( Shape ) args:1,
		function getRight( Shape ) args:1,
		function getUp( Shape ) args:1,
		function transformPoint( Shape, Vec3 ) args:2,
		function transformLocalPoint( Shape, Vec3 ) args:2,
		function transformRotation( Shape, Quat ) args:2,
		function getBoundingBox( Shape ) args:1,
		function getBody( Shape ) args:1,
		function getInteractable( Shape ) args:1,
		function destroyPart( Shape, Integer ) min:1 max:2,
		function getWorldRotation( Shape ) args:1,
		function createPart( Uuid, Vec3, Quat, [Number, Boolean], [Number, Boolean] ) min:2 max:5,
		function createBlock( Uuid, Vec3, Vec3, Quat, [Number, Boolean], [Number, Boolean] ) min:3 max:6,
		function createJoint( Shape, Uuid, Vec3, Vec3 ) args:4,
		function getMaterialId( Shape ) args:1,
		function getIsHarvest( Uuid ) args:1,
		function getIsStackable( Uuid ) args:1,
		function getShapeTypeColor( Uuid ) args:1,
		function destroyShape( Shape, Integer ) min:1 max:2,
		function getShapeTitle( Uuid ) args:1,
		function getShapeDescription( Uuid ) args:1,
		function getShapeIcon( Uuid ) args:1,
		function shapeExists( Shape ) args:1,
		function shapesInSphere( Vec3, [String, Number] ) args:2,
		function getNeighbours( Shape ) args:1,
		function getPipedNeighbours( Shape ) args:1,
		[userdata] getId( Shape ) args:1,
		[userdata] getShapeUuid( Shape ) args:1,
		[userdata] getColor( Shape ) args:1,
		[userdata] setColor( Shape, Color ) args:2,
		[userdata] getMass( Shape ) args:1,
		[userdata] getBuoyancy( Shape ) args:1,
		[userdata] getMaterial( Shape ) args:1,
		[userdata] getWorldPosition( Shape ) args:1,
		[userdata] getLocalPosition( Shape ) args:1,
		[userdata] getVelocity( Shape ) args:1,
		[userdata] getXAxis( Shape ) args:1,
		[userdata] getYAxis( Shape ) args:1,
		[userdata] getZAxis( Shape ) args:1,
		[userdata] getAt( Shape ) args:1,
		[userdata] getRight( Shape ) args:1,
		[userdata] getUp( Shape ) args:1,
		[userdata] transformPoint( Shape, Vec3 ) args:2,
		[userdata] transformLocalPoint( Shape, Vec3 ) args:2,
		[userdata] transformRotation( Shape, Quat ) args:2,
		[userdata] getBoundingBox( Shape ) args:1,
		[userdata] getBody( Shape ) args:1,
		[userdata] getInteractable( Shape ) args:1,
		[userdata] destroyPart( Shape, Integer ) min:1 max:2,
		[userdata] getWorldRotation( Shape ) args:1,
		[userdata] createJoint( Shape, Uuid, Vec3, Vec3 ) args:4,
		[userdata] getMaterialId( Shape ) args:1,
		[userdata] getIsHarvest( Uuid ) args:1,
		[userdata] getIsStackable( Uuid ) args:1,
		[userdata] destroyShape( Shape, Integer ) min:1 max:2,
		[userdata] destroyBlock( Shape, Vec3, Vec3, Integer ) min:2 max:4,
		[userdata] getClosestBlockLocalPosition( Shape, Vec3 ) args:2,
		[userdata] shapeExists( Shape ) args:1,
		[userdata] shapesInSphere( Vec3, [String, Number] ) args:2,
		[userdata] getNeighbours( Shape ) args:1,
		[userdata] getPipedNeighbours( Shape ) args:1,
		[userdata] replaceShape( Shape, Uuid ) args:2,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Shape, Shape ) args:2,
	},
	"body": {
		function getId( Body ) args:1,
		function getCreationId( Body ) args:1,
		function getMass( Body ) args:1,
		function getWorldPosition( Body ) args:1,
		function getVelocity( Body ) args:1,
		function getAngularVelocity( Body ) args:1,
		function getShapes( Body ) args:1,
		function getCreationShapes( Body ) args:1,
		function getCreationBodies( Body ) args:1,
		function getCreationsFromBodies( Table ) args:1,
		function hasChanged( Body, Integer ) args:2,
		function getAllBodies( ) args:0,
		function createBody( Vec3, Quat, [Number, Boolean] ) min:1 max:3,
		function getWorldRotation( Body ) args:1,
		function getCenterOfMassPosition( Body ) args:1,
		function isDynamic( Body ) args:1,
		function isStatic( Body ) args:1,
		function isOnLift( Body ) args:1,
		function isDestructable( Body ) args:1,
		function setDestructable( Body, [Number, Boolean] ) args:2,
		function isBuildable( Body ) args:1,
		function setBuildable( Body, [Number, Boolean] ) args:2,
		function isPaintable( Body ) args:1,
		function setPaintable( Body, [Number, Boolean] ) args:2,
		function isConnectable( Body ) args:1,
		function setConnectable( Body, [Number, Boolean] ) args:2,
		function isLiftable( Body ) args:1,
		function setLiftable( Body, [Number, Boolean] ) args:2,
		function isUsable( Body ) args:1,
		function setUsable( Body, [Number, Boolean] ) args:2,
		function isErasable( Body ) args:1,
		function setErasable( Body, [Number, Boolean] ) args:2,
		function isConvertibleToDynamic( Body ) args:1,
		function setConvertibleToDynamic( Body, [Number, Boolean] ) args:2,
		[userdata] getId( Body ) args:1,
		[userdata] getCreationId( Body ) args:1,
		[userdata] getMass( Body ) args:1,
		[userdata] getWorldPosition( Body ) args:1,
		[userdata] getVelocity( Body ) args:1,
		[userdata] getAngularVelocity( Body ) args:1,
		[userdata] getShapes( Body ) args:1,
		[userdata] getCreationShapes( Body ) args:1,
		[userdata] getCreationBodies( Body ) args:1,
		[userdata] createPart( Body, Uuid, Vec3, Vec3, Vec3, [Number, Boolean] ) min:5 max:6,
		[userdata] createBlock( Body, Uuid, Vec3, Vec3 ) min:8268682 max:4,
		[userdata] hasChanged( Body, Integer ) args:2,
		[userdata] isDynamic( Body ) args:1,
		[userdata] isStatic( Body ) args:1,
		[userdata] isOnLift( Body ) args:1,
		[userdata] isDestructable( Body ) args:1,
		[userdata] setDestructable( Body, [Number, Boolean] ) args:2,
		[userdata] isBuildable( Body ) args:1,
		[userdata] setBuildable( Body, [Number, Boolean] ) args:2,
		[userdata] isPaintable( Body ) args:1,
		[userdata] setPaintable( Body, [Number, Boolean] ) args:2,
		[userdata] isConnectable( Body ) args:1,
		[userdata] setConnectable( Body, [Number, Boolean] ) args:2,
		[userdata] isLiftable( Body ) args:1,
		[userdata] setLiftable( Body, [Number, Boolean] ) args:2,
		[userdata] isUsable( Body ) args:1,
		[userdata] setUsable( Body, [Number, Boolean] ) args:2,
		[userdata] isErasable( Body ) args:1,
		[userdata] setErasable( Body, [Number, Boolean] ) args:2,
		[userdata] isConvertibleToDynamic( Body ) args:1,
		[userdata] setConvertibleToDynamic( Body, [Number, Boolean] ) args:2,
		[userdata] getAllSeatedCharacter( Body ) args:1,
		[userdata] getCenterOfMassPosition( Body ) args:1,
		[userdata] getWorld( Body ) args:1,
		[userdata] getLocalAabb( Body ) args:1,
		[userdata] getWorldAabb( Body ) args:1,
		[userdata] transformPoint( Body, Vec3 ) args:2,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Body, Body ) args:2,
	},
	"interactable": {
		function getId( Interactable ) args:1,
		function getType( Interactable ) args:1,
		function getColorNormal( Interactable ) args:1,
		function getColorHighlight( Interactable ) args:1,
		function getMaxParentCount( Interactable ) args:1,
		function getMaxChildCount( Interactable ) args:1,
		function isActive( Interactable ) args:1,
		function setActive( Interactable, [Number, Boolean] ) args:2,
		function getPower( Interactable ) args:1,
		function setPower( Interactable, [String, Number] ) args:2,
		function getPublicData( Interactable ) args:1,
		function setPublicData( Interactable, Table ) args:2,
		function getShape( Interactable ) args:1,
		function getConnectionInputType( Interactable ) args:1,
		function getConnectionOutputType( Interactable ) args:1,
		function getBody( Interactable ) args:1,
		function getSingleParent( Interactable ) args:1,
		function getParents( Interactable, Integer ) min:1 max:2,
		function getChildren( Interactable, Integer ) min:1 max:2,
		function getJoints( Interactable ) args:1,
		function getBearings( Interactable ) args:1,
		function getPistons( Interactable ) args:1,
		function getPoseWeight( Interactable, Integer ) args:2,
		function setPoseWeight( Interactable, Integer, [String, Number] ) args:3,
		function getGlowMultiplier( Interactable ) args:1,
		function setGlowMultiplier( Interactable, [String, Number] ) args:2,
		function getUvFrameIndex( Interactable ) args:1,
		function setUvFrameIndex( Interactable, Integer ) args:2,
		function hasAnim( Interactable, String ) args:2,
		function setAnimProgress( Interactable, ---, [String, Number] ) args:3,
		function setAnimEnabled( Interactable, ---, [Number, Boolean] ) args:3,
		function getAnimDuration( Interactable, String ) args:2,
		function getLocalBonePosition( Interactable, String ) args:2,
		function getWorldBonePosition( Interactable, String ) args:2,
		function getContainer( Interactable, Integer ) min:1 max:2,
		function connect( Interactable, Interactable ) args:2,
		function disconnect( Interactable, Interactable ) args:2,
		function addContainer( Interactable, Integer, Integer, Integer ) min:3 max:4,
		function removeContainer( Interactable, Integer ) args:2,
		function setParams( Interactable, [Number, Boolean, String, Table] ) args:2,
		[userdata] getId( Interactable ) args:1,
		[userdata] getType( Interactable ) args:1,
		[userdata] getColorNormal( Interactable ) args:1,
		[userdata] getColorHighlight( Interactable ) args:1,
		[userdata] getMaxParentCount( Interactable ) args:1,
		[userdata] getMaxChildCount( Interactable ) args:1,
		[userdata] isActive( Interactable ) args:1,
		[userdata] setActive( Interactable, [Number, Boolean] ) args:2,
		[userdata] getPower( Interactable ) args:1,
		[userdata] setPower( Interactable, [String, Number] ) args:2,
		[userdata] getPublicData( Interactable ) args:1,
		[userdata] setPublicData( Interactable, Table ) args:2,
		[userdata] hasOutputType( Interactable, Integer ) args:2,
		[userdata] getShape( Interactable ) args:1,
		[userdata] getConnectionInputType( Interactable ) args:1,
		[userdata] getConnectionOutputType( Interactable ) args:1,
		[userdata] getBody( Interactable ) args:1,
		[userdata] getSingleParent( Interactable ) args:1,
		[userdata] getParents( Interactable, Integer ) min:1 max:2,
		[userdata] getChildren( Interactable, Integer ) min:1 max:2,
		[userdata] getJoints( Interactable ) args:1,
		[userdata] getBearings( Interactable ) args:1,
		[userdata] getPistons( Interactable ) args:1,
		[userdata] getPoseWeight( Interactable, Integer ) args:2,
		[userdata] setPoseWeight( Interactable, Integer, [String, Number] ) args:3,
		[userdata] getGlowMultiplier( Interactable ) args:1,
		[userdata] setGlowMultiplier( Interactable, [String, Number] ) args:2,
		[userdata] getUvFrameIndex( Interactable ) args:1,
		[userdata] setUvFrameIndex( Interactable, Integer ) args:2,
		[userdata] hasAnim( Interactable, String ) args:2,
		[userdata] setAnimProgress( Interactable, ---, [String, Number] ) args:3,
		[userdata] setAnimEnabled( Interactable, ---, [Number, Boolean] ) args:3,
		[userdata] getAnimDuration( Interactable, String ) args:2,
		[userdata] getLocalBonePosition( Interactable, String ) args:2,
		[userdata] getWorldBonePosition( Interactable, String ) args:2,
		[userdata] getContainer( Interactable, Integer ) min:1 max:2,
		[userdata] connect( Interactable, Interactable ) args:2,
		[userdata] disconnect( Interactable, Interactable ) args:2,
		[userdata] connectToJoint( Interactable, Joint ) args:2,
		[userdata] addContainer( Interactable, Integer, Integer, Integer ) min:3 max:4,
		[userdata] removeContainer( Interactable, Integer ) args:2,
		[userdata] setParams( Interactable, [Number, Boolean, String, Table] ) args:2,
		[userdata] hasSeat( Interactable ) args:1,
		[userdata] setSeatCharacter( Interactable, Character ) args:2,
		[userdata] getSeatCharacter( Interactable ) args:1,
		[userdata] getSeatInteractables( Interactable ) args:1,
		[userdata] pressSeatInteractable( Interactable, Integer ) args:2,
		[userdata] releaseSeatInteractable( Interactable, Integer ) args:2,
		[userdata] hasSteering( Interactable ) args:1,
		[userdata] setSteeringFlag( Interactable, Integer ) args:2,
		[userdata] unsetSteeringFlag( Interactable, Integer ) args:2,
		[userdata] getSteeringPower( Interactable ) args:1,
		[userdata] getSteeringAngle( Interactable ) args:1,
		[userdata] getSteeringJointLeftAngleSpeed( Interactable, Joint ) args:2,
		[userdata] getSteeringJointRightAngleSpeed( Interactable, Joint ) args:2,
		[userdata] getSteeringJointLeftAngleLimit( Interactable, Joint ) args:2,
		[userdata] getSteeringJointRightAngleLimit( Interactable, Joint ) args:2,
		[userdata] getSteeringJointUnlocked( Interactable, Joint ) args:2,
		[userdata] getSteeringJointSettings( Interactable, Joint ) args:2,
		[userdata] setSteeringJointLeftAngleSpeed( Interactable, Joint, [String, Number] ) args:3,
		[userdata] setSteeringJointRightAngleSpeed( Interactable, Joint, [String, Number] ) args:3,
		[userdata] setSteeringJointLeftAngleLimit( Interactable, Joint, [String, Number] ) args:3,
		[userdata] setSteeringJointRightAngleLimit( Interactable, Joint, [String, Number] ) args:3,
		[userdata] setSteeringJointUnlocked( Interactable, Joint, [Number, Boolean] ) args:3,
		[userdata] setSteeringJointSettings( Interactable, Joint, [String, Number], [String, Number], [String, Number], [String, Number], [Number, Boolean] ) args:7,
		[userdata] setSubMeshVisible( Interactable, String, [Number, Boolean] ) args:3,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Interactable, Interactable ) args:2,
	},
	"joint": {
		function createPart( Joint, Uuid, Vec3, Vec3, Vec3, [Number, Boolean], ---, ---, ---, --- ),
		function createBlock( Joint, Uuid, Vec3, Vec3, [Number, Boolean], ---, ---, ---, ---, --- ),
		function getId( Joint ) args:1,
		function getType( Joint ) args:1,
		function getShapeA( Joint ) args:1,
		function getShapeB( Joint ) args:1,
		function getColor( Joint ) args:1,
		function getAngle( Joint ) args:1,
		function getAngularVelocity( Joint ) args:1,
		function getAppliedImpulse( Joint ) args:1,
		function isReversed( Joint ) args:1,
		function setMotorVelocity( Joint, [String, Number], [String, Number] ) args:3,
		function setTargetAngle( Joint, [String, Number], [String, Number], [String, Number] ) args:4,
		function getLength( Joint ) args:1,
		function setTargetLength( Joint, [String, Number], [String, Number], [String, Number] ) min:3 max:4,
		[userdata] createPart( Joint, Uuid, Vec3, Vec3, Vec3, [Number, Boolean], ---, ---, ---, --- ),
		[userdata] createBlock( Joint, Uuid, Vec3, Vec3, [Number, Boolean], ---, ---, ---, ---, --- ),
		[userdata] getId( Joint ) args:1,
		[userdata] getType( Joint ) args:1,
		[userdata] getShapeA( Joint ) args:1,
		[userdata] getShapeB( Joint ) args:1,
		[userdata] getColor( Joint ) args:1,
		[userdata] getAngle( Joint ) args:1,
		[userdata] getAngularVelocity( Joint ) args:1,
		[userdata] getAppliedImpulse( Joint ) args:1,
		[userdata] isReversed( Joint ) args:1,
		[userdata] setMotorVelocity( Joint, [String, Number], [String, Number] ) args:3,
		[userdata] setTargetAngle( Joint, [String, Number], [String, Number], [String, Number] ) args:4,
		[userdata] getLength( Joint ) args:1,
		[userdata] setTargetLength( Joint, [String, Number], [String, Number], [String, Number] ) min:3 max:4,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Joint, Joint ) args:2,
	},
	"network": {
		[userdata] sendToServer( Network, [Number, Boolean, String, Table], --- ) min:2 max:3,
		[userdata] sendToClient( Network, Player, [Number, Boolean, String, Table], --- ) min:3 max:4,
		[userdata] sendToClients( Network, [Number, Boolean, String, Table], --- ) min:2 max:3,
		[userdata] setClientData( Network, [Number, Boolean, String, Table] ) args:2,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
	},
	"projectile": {
		function getProjectileMass( String ) args:1,
		function playerFire( String, Vec3, Vec3, Vec3, Vec3, Integer ) min:3 max:6,
		function shapeFire( Shape, String, Vec3, Vec3, Integer ) min:4 max:5,
		function solveBallisticArc( Vec3, Vec3, [String, Number], [String, Number] ) args:4,
		function projectileAttack( String, Integer, Vec3, Vec3, [Unit, Player], Vec3, Vec3, Integer ) min:5 max:8,
		function customProjectileAttack( [Number, Boolean, String, Table], String, Integer, Vec3, Vec3, [Unit, Player], Vec3, Vec3, Integer ) min:6 max:9,
		function shapeProjectileAttack( String, Integer, Vec3, Vec3, Shape, Integer ) min:5 max:6,
		function shapeCustomProjectileAttack( [Number, Boolean, String, Table], String, Integer, Vec3, Vec3, Shape, Integer ) min:6 max:7,
		function harvestableProjectileAttack( String, Integer, Vec3, Vec3, Harvestable, Integer ) min:5 max:6,
		function harvestableCustomProjectileAttack( [Number, Boolean, String, Table], String, Integer, Vec3, Vec3, Harvestable, Integer ) min:6 max:7,
	},
	"melee": {
		function meleeAttack( String, Integer, Vec3, Vec3, [Unit, Player], Integer, [String, Number] ) min:5 max:7,
	},
	"creation": {
		function exportToString( Body, [Number, Boolean], [Number, Boolean] ) min:1 max:3,
		function importFromString( World, String, Vec3, Quat, [Number, Boolean], ---, ---, ---, ---, --- ),
		function importFromFile( World, String, Vec3, Quat, [Number, Boolean], [Number, Boolean], ---, ---, ---, --- ),
	},
	"cell": {
		function getNodesByTag( Integer, Integer, String ) args:3,
		function getNodesByTags( Integer, Integer, Table ) args:3,
		function getInteractablesByTag( Integer, Integer, String ) args:3,
		function getInteractablesByTags( Integer, Integer, Table ) args:3,
		function getInteractablesByUuid( Integer, Integer, Uuid ) args:3,
		function getInteractablesByAnyUuid( Integer, Integer, Table ) args:3,
		function getHarvestables( Integer, Integer, Integer ) min:2 max:3,
		function getTags( Integer, Integer ) args:2,
	},
	"container": {
		function beginTransaction( ) args:0,
		function endTransaction( ) args:0,
		function abortTransaction( ) args:0,
		function getSize( Container ) args:1,
		function getMaxStackSize( Container ) args:1,
		function setItem( Container, Integer, Uuid, Integer, Integer ) min:4 max:5,
		function getItem( Container, Integer ) args:2,
		function getFirstItem( Container ) args:1,
		function hasChanged( Container, Integer ) args:2,
		function isEmpty( Container ) args:1,
		function getId( Container ) args:1,
		function quantity( Container ) args:1,
		function totalQuantity( Container, Uuid ) args:2,
		function itemUuid( Container ) args:1,
		function swap( Container, Integer, Container, Integer ) args:4,
		function spendFromSlot( Container, Integer, Uuid, Integer ) min:-24 max:4,
		function spend( Container, Uuid, Integer ) min:-24 max:3,
		function collectToSlot( Container, Integer, Uuid, Integer ) min:-24 max:4,
		function collect( Container, Uuid, Integer ) min:-24 max:3,
		function canCollect( Container, Uuid, Integer ) args:3,
		function canSpend( Container, Uuid, Integer ) args:3,
		function moveAll( Container, Container ) args:2,
		function setFilters( Container, Table ) args:2,
		[userdata] getSize( Container ) args:1,
		[userdata] getMaxStackSize( Container ) args:1,
		[userdata] setItem( Container, Integer, Uuid, Integer, Integer ) min:4 max:5,
		[userdata] getItem( Container, Integer ) args:2,
		[userdata] hasChanged( Container, Integer ) args:2,
		[userdata] isEmpty( Container ) args:1,
		[userdata] setAllowCollect( Container, [Number, Boolean] ) args:2,
		[userdata] getAllowCollect( Container ) args:1,
		[userdata] setAllowSpend( Container, [Number, Boolean] ) args:2,
		[userdata] getAllowSpend( Container ) args:1,
		[userdata] canCollect( Container, Uuid, Integer ) args:3,
		[userdata] canSpend( Container, Uuid, Integer ) args:3,
		[userdata] setFilters( Container, Table ) args:2,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Container, Container ) args:2,
	},
	"ai": {
		function getClosestVisiblePlayerCharacter( Unit ) args:1,
		function getClosestVisibleCharacterType( Unit, Uuid ) args:2,
		function getClosestVisibleCrop( Unit ) args:1,
		function isReachable( Unit, Vec3 ) args:2,
		function getRandomCreationPosition( Body ) args:1,
		function directPathAvailable( Unit, Vec3, [String, Number] ) min:2 max:3,
		function getBreachablePosition( Unit, Vec3, [String, Number], Integer ) args:4,
		function getAimPosition( Character, [Harvestable, Character], [String, Number], [String, Number] ) args:4,
	},
	"character": {
		function createCharacter( Player, World, Vec3 ) min:0 max:3,
		[userdata] getId( Character ) args:1,
		[userdata] getWorldPosition( Character ) args:1,
		[userdata] getVelocity( Character ) args:1,
		[userdata] getDirection( Character ) args:1,
		[userdata] getMass( Character ) args:1,
		[userdata] getHeight( Character ) args:1,
		[userdata] getPlayer( Character ) args:1,
		[userdata] getUnit( Character ) args:1,
		[userdata] getWorld( Character ) args:1,
		[userdata] isPlayer( Character ) args:1,
		[userdata] getRadius( Character ) args:1,
		[userdata] getGlowMultiplier( Character ) args:1,
		[userdata] setGlowMultiplier( Character, [String, Number] ) args:2,
		[userdata] bindAnimationCallback( Character, String, [String, Number], String ) args:4,
		[userdata] removeAnimationCallbacks( Character ) args:1,
		[userdata] addRenderable( Character, String ) args:2,
		[userdata] removeRenderable( Character, String ) args:2,
		[userdata] getAnimationInfo( Character, String ) args:2,
		[userdata] updateAnimation( Character, String, [String, Number], [String, Number], [Number, Boolean] ) min:3 max:5,
		[userdata] setMovementWeights( Character, [String, Number], [String, Number] ) args:3,
		[userdata] setAllowTumbleAnimations( Character, [Number, Boolean] ) args:2,
		[userdata] setDowned( Character, [Number, Boolean] ) args:2,
		[userdata] isDowned( Character ) args:1,
		[userdata] setSwimming( Character, [Number, Boolean] ) args:2,
		[userdata] isSwimming( Character ) args:1,
		[userdata] setDiving( Character, [Number, Boolean] ) args:2,
		[userdata] isDiving( Character ) args:1,
		[userdata] setTumbling( Character, [Number, Boolean] ) args:2,
		[userdata] isTumbling( Character ) args:1,
		[userdata] applyTumblingImpulse( Character, Vec3 ) args:2,
		[userdata] getTumblingWorldPosition( Character ) args:1,
		[userdata] getTumblingWorldRotation( Character ) args:1,
		[userdata] getTumblingExtent( Character ) args:1,
		[userdata] getTumblingLinearVelocity( Character ) args:1,
		[userdata] getTumblingMass( Character ) args:1,
		[userdata] getCanSwim( Character ) args:1,
		[userdata] getActiveAnimations( Character ) args:1,
		[userdata] getTpBonePos( Character, String ) args:2,
		[userdata] getTpBoneRot( Character, String ) args:2,
		[userdata] setMovementEffects( Character, String ) args:2,
		[userdata] setMovementSpeedFraction( Character, [String, Number] ) args:2,
		[userdata] getMovementSpeedFraction( Character ) args:1,
		[userdata] setLockingInteractable( Character, Interactable ) args:2,
		[userdata] getLockingInteractable( Character ) args:1,
		[userdata] getCurrentMovementNoiseRadius( Character ) args:1,
		[userdata] isSprinting( Character ) args:1,
		[userdata] isAiming( Character ) args:1,
		[userdata] isCrouching( Character ) args:1,
		[userdata] getCurrentMovementSpeed( Character ) args:1,
		[userdata] isOnGround( Character ) args:1,
		[userdata] getCharacterType( Character ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Character, Character ) args:2,
	},
	"player": {
		function getAllPlayers( ) args:0,
		function placeLift( Player, Table, Vec3, Integer, Integer ) args:5,
		function removeLift( Player ) args:1,
		[userdata] getId( Player ) args:1,
		[userdata] getCharacter( Player ) args:1,
		[userdata] setCharacter( Player, Character ) args:2,
		[userdata] getName( Player ) args:1,
		[userdata] getInventory( Player ) args:1,
		[userdata] placeLift( Player, Table, Vec3, Integer, Integer ) args:5,
		[userdata] removeLift( Player ) args:1,
		[userdata] sendCharacterEvent( Player, String ) args:2,
		[userdata] isMale( Player ) args:1,
		[userdata] getCarry( Player ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Player, Player ) args:2,
	},
	"areaTrigger": {
		function createBox( Vec3, Vec3, Quat, Integer, [Number, Boolean, String, Table] ) min:2 max:5,
		function createBoxWater( Vec3, Vec3, Quat, Integer, [Number, Boolean, String, Table] ) min:2 max:5,
		function createAttachedBox( Interactable, Vec3, Vec3, Quat, Integer, [Number, Boolean, String, Table] ) min:2 max:6,
		function destroy( AreaTrigger ) args:1,
		[userdata] getId( AreaTrigger ) args:1,
		[userdata] bindOnEnter( AreaTrigger, String, --- ) min:2 max:3,
		[userdata] bindOnExit( AreaTrigger, String, --- ) min:2 max:3,
		[userdata] bindOnStay( AreaTrigger, String, --- ) min:2 max:3,
		[userdata] bindOnProjectile( AreaTrigger, String, --- ) min:2 max:3,
		[userdata] getContents( AreaTrigger ) args:1,
		[userdata] getWorldMin( AreaTrigger ) args:1,
		[userdata] getWorldMax( AreaTrigger ) args:1,
		[userdata] getWorldPosition( AreaTrigger ) args:1,
		[userdata] setWorldPosition( AreaTrigger, Vec3 ) args:2,
		[userdata] setSize( AreaTrigger, Vec3 ) args:2,
		[userdata] getSize( AreaTrigger ) args:1,
		[userdata] getHostInteractable( AreaTrigger ) args:1,
		[userdata] getUserData( AreaTrigger ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( AreaTrigger, AreaTrigger ) args:2,
		[userdata] __gc( AreaTrigger ) args:1,
	},
	"game": {
		function getServerTick( ) args:0,
		function getCurrentTick( ) args:0,
		function setLimitedInventory( [Number, Boolean] ) args:1,
		function enableRestrictions( [Number, Boolean] ) args:1,
		function bindChatCommand( String, Table, String, String ) args:4,
		function setTimeOfDay( [String, Number] ) args:1,
		function getTimeOfDay( ) args:0,
	},
	"world": {
		function createWorld( String, String, [String, Number, Boolean], Integer, ---, ---, ---, ---, ---, --- ),
		function loadWorld( World ) args:1,
		function destroyWorld( World ) args:1,
		function getId( World ) args:1,
		function getCurrentWorld( ),
		function loadCell( World, Integer, Integer, Player, String, [Number, Boolean, String, Table] ) min:4 max:6,
		[userdata] destroy( World ) args:1,
		[userdata] getId( World ) args:1,
		[userdata] loadCell( World, Integer, Integer, Player, String, [Number, Boolean, String, Table] ) min:4 max:6,
		[userdata] setTerrainScriptData( World, [String, Number, Boolean] ) args:2,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( World, World ) args:2,
	},
	"event": {
		function sendToGame( String, [Number, Boolean, String, Table] ) min:1 max:2,
		function sendToWorld( World, String, [Number, Boolean, String, Table] ) min:2 max:3,
		function sendToUnit( Unit, String, [Number, Boolean, String, Table] ) min:2 max:3,
		function sendToPlayer( Player, String, [Number, Boolean, String, Table] ) min:2 max:3,
		function sendToCharacter( Character, String, [Number, Boolean, String, Table] ) min:2 max:3,
		function sendToHarvestable( Harvestable, String, [Number, Boolean, String, Table] ) min:2 max:3,
		function sendToInteractable( Interactable, String, [Number, Boolean, String, Table] ) min:2 max:3,
	},
	"item": {
		function myFunction( String ) args:1,
		function getShapeOffset( Uuid ) args:1,
		function getQualityLevel( Uuid ) args:1,
		function getPlantable( Uuid ) args:1,
		function getEdible( Uuid ) args:1,
		function getCharacterShape( Uuid ) args:1,
		function isTool( Uuid ) args:1,
		function isBlock( Uuid ) args:1,
		function isPart( Uuid ) args:1,
		function isJoint( Uuid ) args:1,
		function getPlantableUuids( ) args:0,
		function getInteractablesUuidsOfType( String ) args:1,
		function getShapeSize( Uuid ) args:1,
		function getShapeDefaultColor( Uuid ) args:1,
	},
	"challenge": {
		function start( --- ) args:1,
		function stop( ) args:0,
		function hasStarted( ) args:0,
		function levelCompleted( Uuid, [String, Number], [Number, Boolean, String, Table] ) min:2 max:3,
		function getCompletionTime( Uuid ) args:1,
		function getSaveData( Uuid ) args:1,
		function resolveContentPath( String ) args:1,
		function takePicture( Integer, Integer, Integer ) min:0 max:3,
		function takePicturesForMenu( Integer ) min:0 max:1,
	},
	"portal": {
		function createPortal( Vec3 ) args:1,
		function destroy( Portal ) args:1,
		function addWorldPortalHook( World, String, Portal ) args:3,
		function popWorldPortalHook( String ) args:1,
		[userdata] getId( Portal ) args:1,
		[userdata] hasOpeningA( Portal ) args:1,
		[userdata] hasOpeningB( Portal ) args:1,
		[userdata] setOpeningA( Portal, Vec3, Quat ) args:3,
		[userdata] setOpeningB( Portal, Vec3, Quat ) args:3,
		[userdata] getPositionA( Portal ) args:1,
		[userdata] getPositionB( Portal ) args:1,
		[userdata] getRotationA( Portal ) args:1,
		[userdata] getRotationB( Portal ) args:1,
		[userdata] getWorldA( Portal ) args:1,
		[userdata] getWorldB( Portal ) args:1,
		[userdata] getContentsA( Portal ) args:1,
		[userdata] getContentsB( Portal ) args:1,
		[userdata] transferAToB( Portal ) args:1,
		[userdata] transferBToA( Portal ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Portal, Portal ) args:2,
	},
	"quest": {
		function addQuest( Uuid ) args:1,
		function getQuest( Uuid ) args:1,
		function getQuestById( Integer ) args:1,
		function getActiveQuests( ) args:0,
		function removeQuest( Quest ) args:1,
		function completeQuest( Quest ) args:1,
		function getIsRepeatable( Uuid ) args:1,
		function getHasCompleted( Uuid ) args:1,
		[userdata] getUuid( Quest ) args:1,
		[userdata] getObjectives( Quest ) args:1,
		[userdata] getRewards( Quest ) args:1,
		[userdata] getDescription( Quest ) args:1,
		[userdata] remove( Quest ) args:1,
		[userdata] complete( Quest ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Quest, Quest ) args:2,
	},
	"harvestable": {
		function getId( Harvestable ) args:1,
		function getType( Harvestable ) args:1,
		function getName( Harvestable ) args:1,
		function getMaterial( Harvestable ) args:1,
		function getMaterialId( Harvestable ) args:1,
		function destroy( Harvestable ) args:1,
		function create( Uuid, Vec3, Quat, Vec3 ) min:2 max:4,
		function getPosition( Harvestable ) args:1,
		function getRotation( Harvestable ) args:1,
		function getPoseWeight( Harvestable, Integer ) args:2,
		function setPoseWeight( Harvestable, Integer, [String, Number] ) args:3,
		function getColor( Harvestable ) args:1,
		function setColor( Harvestable, Color ) args:2,
		function getUvFrameIndex( Harvestable ) args:1,
		function setUvFrameIndex( Harvestable, Integer ) args:2,
		function setParams( Harvestable, [Number, Boolean, String, Table] ) args:2,
		[userdata] getId( Harvestable ) args:1,
		[userdata] getType( Harvestable ) args:1,
		[userdata] getName( Harvestable ) args:1,
		[userdata] getMaterial( Harvestable ) args:1,
		[userdata] getMaterialId( Harvestable ) args:1,
		[userdata] destroy( Harvestable ) args:1,
		[userdata] getPosition( Harvestable ) args:1,
		[userdata] getRotation( Harvestable ) args:1,
		[userdata] getPoseWeight( Harvestable, Integer ) args:2,
		[userdata] setPoseWeight( Harvestable, Integer, [String, Number] ) args:3,
		[userdata] getColor( Harvestable ) args:1,
		[userdata] setColor( Harvestable, Color ) args:2,
		[userdata] getUvFrameIndex( Harvestable ) args:1,
		[userdata] setUvFrameIndex( Harvestable, Integer ) args:2,
		[userdata] setParams( Harvestable, [Number, Boolean, String, Table] ) args:2,
		[userdata] getUuid( Harvestable ) args:1,
		[userdata] getAabb( Harvestable ) args:1,
		[userdata] setParams( Harvestable, [Number, Boolean, String, Table] ) args:2,
		[userdata] getData( Harvestable ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Harvestable, Harvestable ) args:2,
	},
	"lift": {
		[userdata] getId( Lift ) args:1,
		[userdata] getWorldPosition( Lift ) args:1,
		[userdata] getLevel( Lift ) args:1,
		[userdata] hasBodies( Lift ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Lift, Lift ) args:2,
	},
	"construction": {
		function buildBlock( Uuid, Vec3, [Shape, Lift, Joint] ) min:2 max:3,
		function validateLocalPosition( Uuid, Vec3, Vec3, [Shape, Joint], ---, ---, ---, ---, ---, --- ),
	},
	"storage": {
		function save( [Number, Boolean, String, Table], [Number, Boolean, String, Table] ) args:2,
		function load( [Number, Boolean, String, Table] ) args:1,
		[userdata] save( Storage, [Number, Boolean, String, Table] ) args:2,
		[userdata] load( Storage ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
	},
	"unit": {
		function createUnit( Uuid, Vec3, [String, Number], [Number, Boolean, String, Table] ) min:2 max:4,
		function HACK_getAllUnits_HACK( ) args:0,
		[userdata] destroy( Unit ) args:1,
		[userdata] getId( Unit ) args:1,
		[userdata] setWhiskerData( Unit, Integer, [String, Number], [String, Number], [String, Number] ) args:5,
		[userdata] setHearingData( Unit, [String, Number] ) args:2,
		[userdata] createState( Unit, String ) args:2,
		[userdata] setMovementDirection( Unit, Vec3 ) args:2,
		[userdata] setFacingDirection( Unit, Vec3 ) args:2,
		[userdata] setMovementType( Unit, String ) args:2,
		[userdata] setWantsJump( Unit, [Number, Boolean] ) args:2,
		[userdata] getCurrentMovementDirection( Unit ) args:1,
		[userdata] getCurrentFacingDirection( Unit ) args:1,
		[userdata] sendCharacterEvent( Unit, String ) args:2,
		[userdata] getCharacter( Unit ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Unit, Unit ) args:2,
	},
	"aiState": {
		[userdata] start( AiState ) args:1,
		[userdata] stop( AiState ) args:1,
		[userdata] onFixedUpdate( AiState, [String, Number] ) args:2,
		[userdata] onUnitUpdate( AiState, [String, Number] ) args:2,
		[userdata] isDone( AiState ) args:1,
		[userdata] getMovementDirection( AiState ) args:1,
		[userdata] getFacingDirection( AiState ) args:1,
		[userdata] getMovementType( AiState ) args:1,
		[userdata] getWantsJump( AiState ) args:1,
		[userdata] __newindex( AiState, String, --- ) args:3,
		[userdata] __index( AiState, String ) args:2,
		[userdata] __eq( AiState, AiState ) args:2,
		[userdata] __gc( ),
	},
	"pathfinder": {
		function getPath( Character, Vec3, [Number, Boolean], Table ) min:2 max:4,
		function getSortedNodes( Vec3, [String, Number], [String, Number] ) args:3,
	},
	"pathNode": {
		function createPathNode( Vec3, [String, Number] ) args:2,
		[userdata] destroy( ),
		[userdata] connect( PathNode, PathNode, Table, Table, [String, Number] ) min:2 max:5,
		[userdata] getPosition( PathNode ) args:1,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( PathNode, PathNode ) args:2,
	},
	"tool": {
		function checkLiftCollision( Table, Vec3, Integer ) args:3,
		function preloadRenderables( Table ) args:1,
		function forceTool( Tool ) args:1,
		[userdata] getId( Tool ) args:1,
		[userdata] getOwner( Tool ) args:1,
		[userdata] updateAnimation( Tool, String, [String, Number], [String, Number] ) min:3 max:4,
		[userdata] setMovementAnimation( Tool, String, String ) args:3,
		[userdata] updateMovementAnimation( Tool, [String, Number], [String, Number] ) min:2 max:3,
		[userdata] getAnimationInfo( Tool, String ) args:2,
		[userdata] updateJoint( Tool, String, Vec3, [String, Number] ) min:3 max:4,
		[userdata] updateCamera( Tool, [String, Number], [String, Number], Vec3, [String, Number] ) args:5,
		[userdata] setTpRenderables( Tool, Table ) args:2,
		[userdata] setTpColor( Tool, Color ) args:2,
		[userdata] updateFpAnimation( Tool, String, [String, Number], [String, Number], [Number, Boolean] ) min:3 max:5,
		[userdata] getFpAnimationInfo( Tool, String ) args:2,
		[userdata] setFpRenderables( Tool, Table ) args:2,
		[userdata] setFpColor( Tool, Color ) args:2,
		[userdata] updateFpCamera( Tool, [String, Number], Vec3, [String, Number], [String, Number] ) args:5,
		[userdata] isCrouching( Tool ) args:1,
		[userdata] isSprinting( Tool ) args:1,
		[userdata] isOnGround( Tool ) args:1,
		[userdata] setBlockSprint( Tool, [Number, Boolean] ) args:2,
		[userdata] setMovementSlowDown( Tool, [Number, Boolean] ) args:2,
		[userdata] isLocal( Tool ) args:1,
		[userdata] isInFirstPersonView( Tool ) args:1,
		[userdata] setDispersionFraction( Tool, [String, Number] ) args:2,
		[userdata] setCrossHairAlpha( Tool, [String, Number] ) args:2,
		[userdata] setInteractionTextSuppressed( Tool, [Number, Boolean] ) args:2,
		[userdata] getPosition( Tool ) args:1,
		[userdata] getDirection( Tool ) args:1,
		[userdata] getMovementVelocity( Tool ) args:1,
		[userdata] getRelativeMoveDirection( Tool ) args:1,
		[userdata] getMovementSpeedFraction( Tool ) args:1,
		[userdata] getTpBonePos( Tool, String ) args:2,
		[userdata] getTpBoneDir( Tool, String ) args:2,
		[userdata] getFpBonePos( Tool, String ) args:2,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
	},
	"audio": {
		function play( String, Vec3 ) min:1 max:2,
	},
	"particle": {
		function createParticle( String, Vec3, Quat, Color ) min:2 max:4,
	},
	"effect": {
		function playEffect( String, Vec3, Vec3, Quat, Vec3, Table ) min:2 max:6,
		function playHostedEffect( String, [Character, Interactable], String, Table ) min:2 max:4,
		function createEffect( String, [Character, Interactable], String, ---, ---, ---, ---, ---, ---, --- ),
		function createEffect2D( String ) args:1,
		[userdata] getId( Effect ) args:1,
		[userdata] start( Effect ) args:1,
		[userdata] stop( Effect ) args:1,
		[userdata] destroy( Effect ) args:1,
		[userdata] isPlaying( Effect ) args:1,
		[userdata] setPosition( Effect, Vec3 ) args:2,
		[userdata] setScale( Effect, Vec3 ) args:2,
		[userdata] setVelocity( Effect, Vec3 ) args:2,
		[userdata] setRotation( Effect, Quat ) args:2,
		[userdata] setOffsetPosition( Effect, Vec3 ) args:2,
		[userdata] setOffsetRotation( Effect, Quat ) args:2,
		[userdata] setParameter( Effect, String, [Number, Boolean, String, Color, Uuid] ) args:3,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __eq( Effect, Effect ) args:2,
		[userdata] __gc( Effect ) args:1,
	},
	"localPlayer": {
		function getPlayer( ) args:0,
		function getId( ) args:0,
		function getPosition( ) args:0,
		function getDirection( ) args:0,
		function getRight( ) args:0,
		function getUp( ) args:0,
		function getRaycastStart( ) args:0,
		function getRaycast( [String, Number], Vec3, Vec3 ) min:1 max:3,
		function isInFirstPersonView( ) args:0,
		function getFpBonePos( String ) args:1,
		function getActiveItem( ) args:0,
		function getSelectedHotbarSlot( ) args:0,
		function getCarry( ) args:0,
		function getInventory( ) args:0,
		function setDirection( Vec3 ) args:1,
		function getFpAnimationInfo( String ) args:1,
		function updateFpAnimation( String, [String, Number], [String, Number], [Number, Boolean] ) min:2 max:4,
		function addRenderable( String ) args:1,
		function removeRenderable( String ) args:1,
		function setBlockSprinting( [Number, Boolean] ) args:1,
		function setLockedControls( [Number, Boolean] ) args:1,
	},
	"camera": {
		function setPosition( Vec3 ) args:1,
		function getPosition( ) args:0,
		function getDefaultPosition( ) args:0,
		function setDirection( Vec3 ) args:1,
		function getDirection( ) args:0,
		function getUp( ) args:0,
		function getRight( ) args:0,
		function getFov( ) args:0,
		function setShake( [String, Number] ) args:1,
		function setCameraState( Integer ) args:1,
		function getCameraState( ) args:0,
		function setCameraPullback( Integer, Integer ) args:2,
		function cameraSphereCast( [String, Number], Vec3, Vec3 ) args:3,
	},
	"gui": {
		"widget": {
			[REMOVED] function getId( ),
			[REMOVED] function getName( ),
			[REMOVED] function getTypeName( ),
			[REMOVED] function getPosition( ),
			[REMOVED] function setPosition( ),
			[REMOVED] function getVisible( ),
			[REMOVED] function setVisible( ),
			[REMOVED] function getSize( ),
			[REMOVED] function setSize( ),
			[REMOVED] function getText( ),
			[REMOVED] function setText( ),
			[REMOVED] function destroy( ),
			[REMOVED] function find( ),
			[REMOVED] function bindOnClick( ),
			[REMOVED] [userdata] find( ),
			[REMOVED] [userdata] getName( ),
			[REMOVED] [userdata] getTypeName( ),
			[REMOVED] [userdata] getPosition( ),
			[REMOVED] [userdata] setPosition( ),
			[REMOVED] [userdata] getVisible( ),
			[REMOVED] [userdata] setVisible( ),
			[REMOVED] [userdata] getSize( ),
			[REMOVED] [userdata] setSize( ),
			[REMOVED] [userdata] getText( ),
			[REMOVED] [userdata] setText( ),
			[REMOVED] [userdata] find( ),
			[REMOVED] [userdata] bindOnClick( ),
			[userdata] __newindex( ---, String, --- ) args:3,
			[userdata] __index( ---, String ) args:2,
			[userdata] __eq( Widget, Widget ) args:2,
		},
		"interface": {
			[userdata] destroy( GuiInterface ) args:1,
			[userdata] open( GuiInterface ) args:1,
			[userdata] close( GuiInterface ) args:1,
			[userdata] isActive( GuiInterface ) args:1,
			[userdata] setText( GuiInterface, String, String ) args:3,
			[userdata] setTextFromItemName( GuiInterface, String, Uuid ) args:3,
			[userdata] setVisible( GuiInterface, String, Boolean ) args:3,
			[userdata] setImage( GuiInterface, String, String ) args:3,
			[userdata] setIconImage( GuiInterface, String, Uuid ) args:3,
			[userdata] setButtonState( GuiInterface, String, Boolean ) args:3,
			[userdata] setSliderRange( GuiInterface, String, Integer ) args:3,
			[userdata] setSliderPosition( GuiInterface, String, Integer ) args:3,
			[userdata] setSliderRangeLimit( GuiInterface, String, Integer ) args:3,
			[userdata] setSliderData( GuiInterface, String, Integer, Integer ) args:4,
			[userdata] clearList( GuiInterface, String ) args:2,
			[userdata] addListItem( GuiInterface, String, String, [String, Number, Boolean] ) args:4,
			[userdata] setSelectedListItem( GuiInterface, String, String ) args:3,
			[userdata] clearGrid( GuiInterface, String ) args:2,
			[userdata] addGridItemsFromFile( GuiInterface, String, String, [String, Number, Boolean] ) min:3 max:4,
			[userdata] addGridItem( GuiInterface, String, [String, Number, Boolean] ) args:3,
			[userdata] setGridItem( GuiInterface, String, Integer, [String, Number, Boolean] ) args:4,
			[userdata] setGridSize( GuiInterface, String, Integer ) args:3,
			[userdata] setContainer( GuiInterface, String, Container ) args:3,
			[userdata] setContainers( GuiInterface, String, Table ) args:3,
			[userdata] setData( GuiInterface, String, [String, Number, Boolean] ) args:3,
			[userdata] setHost( GuiInterface, [Shape, Character], String ) min:2 max:3,
			[userdata] setWorldPosition( GuiInterface, Vec3 ) args:2,
			[userdata] setMaxRenderDistance( GuiInterface, [String, Number] ) args:2,
			[userdata] setFadeRange( GuiInterface, [String, Number] ) args:2,
			[userdata] setRequireLineOfSight( GuiInterface, Boolean ) args:2,
			[userdata] setOnCloseCallback( GuiInterface, String ) args:2,
			[userdata] setButtonCallback( GuiInterface, String, String ) args:3,
			[userdata] setSliderCallback( GuiInterface, String, String ) args:3,
			[userdata] setGridButtonCallback( GuiInterface, String, String ) args:3,
			[userdata] setGridItemChangedCallback( GuiInterface, String, String ) args:3,
			[userdata] setListSelectionCallback( GuiInterface, String, String ) args:3,
			[userdata] __newindex( ---, String, --- ) args:3,
			[userdata] __index( ---, String ) args:2,
			[userdata] __eq( GuiInterface, GuiInterface ) args:2,
			[userdata] __gc( GuiInterface ) args:1,
		},
		[REMOVED] function createWidget( ),
		function getScreenSize( ) args:0,
		function createContainerGui( [Number, Boolean] ) min:0 max:1,
		function createWorkbenchGui( [Number, Boolean] ) min:0 max:1,
		function createCookBotGui( [Number, Boolean] ) min:0 max:1,
		function createCraftBotGui( [Number, Boolean] ) min:0 max:1,
		function createMechanicStationGui( [Number, Boolean] ) min:0 max:1,
		function createSurvivalHudGui( [Number, Boolean] ) min:0 max:1,
		function createHideoutGui( [Number, Boolean] ) min:0 max:1,
		function createDressBotGui( [Number, Boolean] ) min:0 max:1,
		function createEngineGui( [Number, Boolean] ) min:0 max:1,
		function createSeatGui( [Number, Boolean] ) min:0 max:1,
		function createNameTagGui( [Number, Boolean] ) min:0 max:1,
		function createBagIconGui( [Number, Boolean] ) min:0 max:1,
		function createAmmunitionContainerGui( [Number, Boolean] ) min:0 max:1,
		function createBatteryContainerGui( [Number, Boolean] ) min:0 max:1,
		function createChemicalContainerGui( [Number, Boolean] ) min:0 max:1,
		function createFertilizerContainerGui( [Number, Boolean] ) min:0 max:1,
		function createGasContainerGui( [Number, Boolean] ) min:0 max:1,
		function createSeedContainerGui( [Number, Boolean] ) min:0 max:1,
		function createWaterContainerGui( [Number, Boolean] ) min:0 max:1,
		function createSeatUpgradeGui( [Number, Boolean] ) min:0 max:1,
		function createSteeringBearingGui( [Number, Boolean] ) min:0 max:1,
		function createChallengeHUDGui( [Number, Boolean] ) min:0 max:1,
		function createChallengeMessageGui( [Number, Boolean] ) min:0 max:1,
		function displayAlertText( String, [String, Number] ) min:1 max:2,
		function hideGui( [Number, Boolean] ) args:1,
		function getKeyBinding( String ) args:1,
		function setInteractionText( ---, ---, ---, ---, --- ) min:1 max:5,
		function setCenterIcon( String ) args:1,
		function setProgressFraction( [String, Number] ) args:1,
		function createCharacterCustomizationGui( [Number, Boolean] ) min:0 max:1,
		function setCharacterDebugText( Character, String, [Number, Boolean] ) min:2 max:3,
		function exitToMenu( ) args:0,
		function chatMessage( String ) args:1,
	},
	"visualization": {
		function setCreationBodies( Table ) args:1,
		function setCreationVisible( Boolean ) args:1,
		function setCreationValid( Boolean ) args:1,
		function setCreationFreePlacement( Boolean ) args:1,
		function setCreationFreePlacementPosition( Vec3 ) args:1,
		function setCreationFreePlacementRotation( Integer ) args:1,
		function setLiftPosition( Vec3 ) args:1,
		function setLiftLevel( Integer ) args:1,
		function setLiftVisible( Boolean ) args:1,
		function setLiftValid( Boolean ) args:1,
		function setBlockVisualization( Vec3, Boolean, [Shape, Joint] ) min:1 max:3,
	},
	"render": {
		function setOutdoorLighting( [String, Number] ) args:1,
		function getOutdoorLighting( ),
		function getScreenCoordinatesFromWorldPosition( Vec3, Integer, Integer ) args:3,
	},
	"terrainTile": {
		function getHeightAt( Integer, Integer, Integer, Integer, Integer, Integer ) args:6,
		function getColorAt( Integer, Integer, Integer, Integer, Integer, Integer ) args:6,
		function getMaterialAt( Integer, Integer, Integer, Integer, Integer, Integer ) args:6,
		function getClutterIdxAt( Integer, Integer, Integer, Integer, Integer ) args:5,
		function getAssetsForCell( Integer, Integer, Integer, Integer ) args:4,
		function getHarvestablesForCell( Integer, Integer, Integer, Integer ) args:4,
		function getCreationsForCell( Integer, Integer, Integer ) args:3,
		function getNodesForCell( Integer, Integer, Integer, ---, ---, ---, ---, ---, ---, --- ),
		function getPrefabsForCell( Integer, Integer, Integer, ---, ---, ---, ---, ---, ---, --- ),
		function getDecalsForCell( Integer, Integer, Integer, ---, ---, ---, ---, ---, ---, --- ),
		function getSize( String ) args:1,
		function getTileUuid( String ) args:1,
		function getCreatorId( String ) args:1,
		function getContentFromPrefab( ),
	},
	"physics": {
		function raycast( Vec3, Vec3, [Harvestable, Body, Character], Integer ) min:2 max:4,
		function distanceRaycast( Vec3, Vec3 ) args:2,
		function applyImpulse( [Userdata, Character, Shape, Body], Vec3, Boolean, Vec3 ) min:2 max:4,
		function applyTorque( [Body, Userdata], Vec3, Boolean ) min:2 max:3,
		function explode( Vec3, Integer, [String, Number], [String, Number], [String, Number], String, Shape ) min:5 max:7,
		function setGravity( [String, Number] ) args:1,
		function getGravity( ),
		function getGroundMaterial( Vec3 ) args:1,
		function sphereContactCount( Vec3, [String, Number], Boolean, Boolean, ---, ---, ---, ---, ---, --- ),
		function getSphereContacts( Vec3, [String, Number] ) args:2,
	},
	"terrainData": {
		function save( [Number, Boolean, String, Table] ) args:1,
		function load( ) args:0,
		function exists( ) args:0,
		function legacy_saveTerrainData( Integer, [Number, Boolean, String, Table] ) args:2,
		function legacy_loadTerrainData( Integer ) args:1,
		function legacy_setData( String ) args:1,
		function legacy_getData( ) args:0,
	},
	"json": {
		function open( String ) args:1,
		function save( [String, Number, Boolean], String ) args:2,
		function parseJsonString( String ) args:1,
		function writeJsonString( [String, Number, Boolean] ) args:1,
	},
	"noise": {
		function simplexNoise1d( [String, Number] ) args:1,
		function simplexNoise2d( [String, Number], [String, Number] ) args:2,
		function intNoise2d( Integer, Integer, Integer ) args:3,
		function floatNoise2d( [String, Number], [String, Number], Integer ) args:3,
		function perlinNoise2d( [String, Number], [String, Number], Integer ) args:3,
		function octaveNoise2d( [String, Number], [String, Number], Integer, Integer ) args:4,
		function randomRange( [String, Number], [String, Number] ) args:2,
		function randomNormalDistribution( [String, Number], [String, Number] ) args:2,
		function gunSpread( Vec3, [String, Number] ) args:2,
	},
	"util": {
		function clamp( [String, Number], [String, Number], [String, Number] ) args:3,
		function lerp( [String, Number], [String, Number], [String, Number] ) args:3,
		function bezier2( [String, Number], [String, Number], [String, Number], [String, Number] ) args:4,
		function bezier3( [String, Number], [String, Number], [String, Number], [String, Number], [String, Number] ) args:5,
		function positiveModulo( Integer, Integer ) args:2,
		function smoothstep( [String, Number], [String, Number], [String, Number] ) args:3,
		function smootherstep( [String, Number], [String, Number], [String, Number] ) args:3,
	},
	"log": {
		function info( String ) args:1,
		function warning( String ) args:1,
		function error( String ) args:1,
	},
	"debugDraw": {
		function addArrow( String, Vec3, Vec3, Color ) min:2 max:4,
		function removeArrow( String ) args:1,
		function addSphere( String, Vec3, [String, Number], Color ) min:2 max:4,
		function removeSphere( String ) args:1,
		function clear( String ) min:0 max:1,
	},
	"vec3": {
		function new( [String, Number], [String, Number], [String, Number] ) args:3,
		function zero( ) args:0,
		function one( ) args:0,
		function getX( Vec3 ) args:1,
		function setX( Vec3, [String, Number] ) args:2,
		function getY( Vec3 ) args:1,
		function setY( Vec3, [String, Number] ) args:2,
		function getZ( Vec3 ) args:1,
		function setZ( Vec3, [String, Number] ) args:2,
		function normalize( Vec3 ) args:1,
		function dot( Vec3, Vec3 ) args:2,
		function cross( Vec3, Vec3 ) args:2,
		function length( Vec3 ) args:1,
		function length2( Vec3 ) args:1,
		function lerp( Vec3, Vec3, [String, Number] ) args:3,
		function bezier2( Vec3, Vec3, Vec3, [String, Number] ) args:4,
		function bezier3( Vec3, Vec3, Vec3, Vec3, [String, Number] ) args:5,
		function rotateX( Vec3, [String, Number] ) args:2,
		function rotateY( Vec3, [String, Number] ) args:2,
		function rotateZ( Vec3, [String, Number] ) args:2,
		function rotate( Vec3, ---, Vec3 ) args:3,
		function getRotation( Vec3, Vec3 ) args:2,
		function closestAxis( Vec3 ) args:1,
		[userdata] normalize( Vec3 ) args:1,
		[userdata] dot( Vec3, Vec3 ) args:2,
		[userdata] cross( Vec3, Vec3 ) args:2,
		[userdata] length( Vec3 ) args:1,
		[userdata] length2( Vec3 ) args:1,
		[userdata] rotateX( Vec3, [String, Number] ) args:2,
		[userdata] rotateY( Vec3, [String, Number] ) args:2,
		[userdata] rotateZ( Vec3, [String, Number] ) args:2,
		[userdata] rotate( Vec3, ---, Vec3 ) args:3,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __unm( Vec3, Vec3 ) args:2,
		[userdata] __add( Vec3, Vec3 ) args:2,
		[userdata] __sub( Vec3, Vec3 ) args:2,
		[userdata] __div( Vec3, [String, Vec3, Number] ) args:2,
		[userdata] __mul( Vec3, [String, Vec3, Number] ) args:2,
		[userdata] __lt( Vec3, Vec3 ) args:2,
		[userdata] __eq( Vec3, Vec3 ) args:2,
		[userdata] __tostring( Vec3 ) args:1,
	},
	"quat": {
		function new( [String, Number], [String, Number], [String, Number], [String, Number] ) args:4,
		function identity( ),
		function angleAxis( [String, Number], Vec3 ) args:2,
		function getX( Quat ) args:1,
		function setX( Quat, [String, Number] ) args:2,
		function getY( Quat ) args:1,
		function setY( Quat, [String, Number] ) args:2,
		function getZ( Quat ) args:1,
		function setZ( Quat, [String, Number] ) args:2,
		function getW( Quat ) args:1,
		function setW( Quat, [String, Number] ) args:2,
		function round90( Quat ) args:1,
		function lookRotation( Vec3, Vec3 ) args:2,
		function slerp( Quat, Quat, [String, Number] ) args:3,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __mul( Quat, [Vec3, Quat] ) args:2,
		[userdata] __eq( Quat, Quat ) args:2,
	},
	"uuid": {
		function new( String ) min:0 max:1,
		function getNil( ) args:0,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __tostring( Uuid ) args:1,
		[userdata] __eq( Uuid, Uuid ) args:2,
	},
	"color": {
		function new( [String, Number, Integer], [String, Number], [String, Number], [String, Number], ---, ---, ---, ---, ---, --- ),
		function getR( Color ) args:1,
		function getG( Color ) args:1,
		function getB( Color ) args:1,
		function getA( Color ) args:1,
		function setR( Color, [String, Number] ) args:2,
		function setG( Color, [String, Number] ) args:2,
		function setB( Color, [String, Number] ) args:2,
		function setA( Color, [String, Number] ) args:2,
		[userdata] __newindex( ---, String, --- ) args:3,
		[userdata] __index( ---, String ) args:2,
		[userdata] __add( Color, Color ) args:2,
		[userdata] __sub( Color, Color ) args:2,
		[userdata] __div( Color, [Color, String, Number] ) args:2,
		[userdata] __mul( Color, [Color, String, Number] ) args:2,
		[userdata] __eq( Color, Color ) args:2,
		[userdata] __tostring( Color ) args:1,
	}
}