sm = {
	physics = {
		function raycast( Vec3, Vec3, [Shape, Character, Harvestable, Body], Integer ) args(?),
		function distanceRaycast( Vec3, Vec3 ) args(?),
		function applyImpulse( [Userdata, Body, Character, Shape], Vec3, Number, Vec3 ) args(?),
		function applyTorque( [Userdata, Body], Vec3, Number ) args(?),
		function explode( Vec3, Integer, [Number, String], [Number, String], [Number, String], String, ---, Table ) args(?),
		function setGravity( [Number, String] ) args(?),
		function getGravity( --- ) args(?),
		function getGroundMaterial( Vec3 ) args(?),
		function sphereContactCount( Vec3, [Number, String], Number, Number ) args(?),
		function getSphereContacts( Vec3, [Number, String] ) args(?)
	},
	terrainData = {
		function save( [Table, String, Number] ) args(?),
		function load( --- ) args(?),
		function exists( --- ) args(?),
		function legacy_saveTerrainData( Integer, [Table, String, Number] ) args(?),
		function legacy_loadTerrainData( Integer ) args(?),
		function legacy_setData( String ) args(?),
		function legacy_getData( --- ) args(?)
	},
	json = {
		function open( String ) args(?),
		function save( [Number, String], String ) args(?),
		function parseJsonString( String ) args(?),
		function writeJsonString( [Number, String] ) args(?)
	},
	noise = {
		function simplexNoise1d( [Number, String] ) args(?),
		function simplexNoise2d( [Number, String], [Number, String] ) args(?),
		function intNoise2d( Integer, Integer, Integer ) args(?),
		function floatNoise2d( [Number, String], [Number, String], Integer ) args(?),
		function perlinNoise2d( [Number, String], [Number, String], Integer ) args(?),
		function octaveNoise2d( [Number, String], [Number, String], Integer, Integer ) args(?),
		function randomRange( [Number, String], [Number, String] ) args(?),
		function randomNormalDistribution( [Number, String], [Number, String] ) args(?),
		function gunSpread( Vec3, [Number, String] ) args(?)
	},
	util = {
		function clamp( [Number, String], [Number, String], [Number, String] ) args(?),
		function lerp( [Number, String], [Number, String], [Number, String] ) args(?),
		function bezier2( [Number, String], [Number, String], [Number, String], [Number, String] ) args(?),
		function bezier3( [Number, String], [Number, String], [Number, String], [Number, String], [Number, String] ) args(?),
		function positiveModulo( Integer, Integer ) args(?),
		function smoothstep( [Number, String], [Number, String], [Number, String] ) args(?),
		function smootherstep( [Number, String], [Number, String], [Number, String] ) args(?)
	},
	projectile = {
		function getProjectileMass( String ) args(?),
		function playerFire( String, Vec3, Vec3, Vec3, Vec3, Integer ) args(?),
		function shapeFire( Shape, String, Vec3, Vec3, Integer ) args(?),
		function solveBallisticArc( Vec3, Vec3, [Number, String], [Number, String] ) args(?),
		function projectileAttack( String, Integer, Vec3, Vec3, ---, Vec3, Vec3, Integer ) args(?),
		function customProjectileAttack( [Table, String, Number], String, Integer, Vec3, Vec3, ---, Vec3, Vec3, Integer ) args(?),
		function shapeProjectileAttack( String, Integer, Vec3, Vec3, Shape, Integer ) args(?),
		function shapeCustomProjectileAttack( [Table, String, Number], String, Integer, Vec3, Vec3, Shape, Integer ) args(?),
		function harvestableProjectileAttack( String, Integer, Vec3, Vec3, Harvestable, Integer ) args(?),
		function harvestableCustomProjectileAttack( [Table, String, Number], String, Integer, Vec3, Vec3, Harvestable, Integer ) args(?)
	},
	melee = {
		function meleeAttack( String, Integer, Vec3, Vec3, ---, Integer, [Number, String] ) args(?)
	},
	game = {
		function getServerTick( --- ) args(?),
		function getCurrentTick( --- ) args(?),
		function setLimitedInventory( Number ) args(?),
		function getLimitedInventory( --- ) args(?),
		function setEnableRestrictions( Number ) args(?),
		function getEnableRestrictions( --- ) args(?),
		function setEnableAmmoConsumption( Number ) args(?),
		function getEnableAmmoConsumption( --- ) args(?),
		function setEnableFuelConsumption( Number ) args(?),
		function getEnableFuelConsumption( --- ) args(?),
		function setEnableUpgradeCost( Number ) args(?),
		function getEnableUpgradeCost( --- ) args(?),
		function setEnableAggro( Number ) args(?),
		function getEnableAggro( --- ) args(?),
		function bindChatCommand( String, Table, String, String ) args(?),
		function setTimeOfDay( [Number, String] ) args(?),
		function getTimeOfDay( --- ) args(?),
		function getDifficulty( --- ) args(?)
	},
	creation = {
		function exportToString( Body, Number, Number ) args(?),
		function importFromString( World, String, Vec3, Quat, Number ) args(?),
		function importFromFile( World, String, Vec3, Quat, Number, Number ) args(?)
	},
	cell = {
		function getNodesByTag( Integer, Integer, String ) args(?),
		function getNodesByTags( Integer, Integer, Table ) args(?),
		function getInteractablesByTag( Integer, Integer, String ) args(?),
		function getInteractablesByTags( Integer, Integer, Table ) args(?),
		function getInteractablesByUuid( Integer, Integer, Uuid ) args(?),
		function getInteractablesByAnyUuid( Integer, Integer, Table ) args(?),
		function getHarvestables( Integer, Integer, Integer ) args(?),
		function getTags( Integer, Integer ) args(?)
	},
	network = {
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		[userdata] function sendToServer( Network, String, [Table, String, Number] ) args(?),
		[userdata] function sendToClient( Network, ---, String, [Table, String, Number] ) args(?),
		[userdata] function sendToClients( Network, String, [Table, String, Number] ) args(?),
		[userdata] function setClientData( Network, [Table, String, Number] ) args(?)
	},
	storage = {
		function save( [Table, String, Number], [Table, String, Number] ) args(?),
		function load( [Table, String, Number] ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		[userdata] function save( Storage, [Table, String, Number] ) args(?),
		[userdata] function load( Storage ) args(?)
	},
	event = {
		function sendToGame( String, [Table, String, Number] ) args(?),
		function sendToWorld( World, String, [Table, String, Number] ) args(?),
		function sendToUnit( ---, String, [Table, String, Number] ) args(?),
		function sendToPlayer( ---, String, [Table, String, Number] ) args(?),
		function sendToCharacter( Character, String, [Table, String, Number] ) args(?),
		function sendToHarvestable( Harvestable, String, [Table, String, Number] ) args(?),
		function sendToInteractable( Interactable, String, [Table, String, Number] ) args(?)
	},
	log = {
		function info( String ) args(?),
		function warning( String ) args(?),
		function error( String ) args(?)
	},
	debugDraw = {
		function addArrow( String, Vec3, Vec3, Color ) args(?),
		function removeArrow( String ) args(?),
		function addSphere( String, Vec3, [Number, String], Color ) args(?),
		function removeSphere( String ) args(?),
		function clear( String ) args(?)
	},
	ai = {
		function getClosestVisiblePlayerCharacter( --- ) args(?),
		function getClosestVisibleCharacterType( ---, Uuid ) args(?),
		function getClosestVisibleTeamOpponent( ---, Color ) args(?),
		function getClosestVisibleCrop( --- ) args(?),
		function isReachable( ---, Vec3 ) args(?),
		function getRandomCreationPosition( Body ) args(?),
		function directPathAvailable( ---, Vec3, [Number, String] ) args(?),
		function getBreachablePosition( ---, Vec3, [Number, String], Integer ) args(?),
		function getAimPosition( --- ) args(?)
	},
	item = {
		function myFunction( String ) args(?),
		function getShapeOffset( Uuid ) args(?),
		function getQualityLevel( Uuid ) args(?),
		function getPlantable( Uuid ) args(?),
		function getEdible( Uuid ) args(?),
		function getCharacterShape( Uuid ) args(?),
		function isTool( Uuid ) args(?),
		function isBlock( Uuid ) args(?),
		function isPart( Uuid ) args(?),
		function isJoint( Uuid ) args(?),
		function getPlantableUuids( --- ) args(?),
		function getInteractablesUuidsOfType( String ) args(?),
		function getShapeSize( Uuid ) args(?),
		function getShapeDefaultColor( Uuid ) args(?)
	},
	challenge = {
		function start( --- ) args(?),
		function stop( --- ) args(?),
		function hasStarted( --- ) args(?),
		function levelCompleted( Uuid, [Number, String], [Table, String, Number] ) args(?),
		function getCompletionTime( Uuid ) args(?),
		function getSaveData( Uuid ) args(?),
		function resolveContentPath( String ) args(?),
		function takePicture( --- ) args(?),
		function takePicturesForMenu( --- ) args(?)
	},
	construction = {
		function buildBlock( Uuid, Vec3, [Lift, Joint, Shape] ) args(?),
		function validateLocalPosition( Uuid, Vec3, Vec3, [Joint, Shape] ) args(?)
	},
	menuCreation = {
		function load( --- ) args(?),
		function save( [Number, String] ) args(?)
	},
	shape = {
		function getId( Shape ) args(?),
		function getShapeUuid( Shape ) args(?),
		function getColor( Shape ) args(?),
		function setColor( Shape, Color ) args(?),
		function getMass( Shape ) args(?),
		function getBuoyancy( Shape ) args(?),
		function getMaterial( Shape ) args(?),
		function getWorldPosition( Shape ) args(?),
		function getLocalPosition( Shape ) args(?),
		function getVelocity( Shape ) args(?),
		function getXAxis( Shape ) args(?),
		function getYAxis( Shape ) args(?),
		function getZAxis( Shape ) args(?),
		function getAt( Shape ) args(?),
		function getRight( Shape ) args(?),
		function getUp( Shape ) args(?),
		function transformPoint( Shape, Vec3 ) args(?),
		function transformLocalPoint( Shape, Vec3 ) args(?),
		function transformRotation( Shape, Quat ) args(?),
		function getBoundingBox( Shape ) args(?),
		function getBody( Shape ) args(?),
		function getInteractable( Shape ) args(?),
		function destroyPart( Shape, Integer ) args(?),
		function getWorldRotation( Shape ) args(?),
		function createPart( Uuid, Vec3, Quat, Number, Number ) args(?),
		function createBlock( Uuid, Vec3, Vec3, Quat, Number, Number ) args(?),
		function createJoint( Shape, Uuid, Vec3, Vec3 ) args(?),
		function uuidExists( Uuid ) args(?),
		function getMaterialId( Shape ) args(?),
		function getIsHarvest( Uuid ) args(?),
		function getIsStackable( Uuid ) args(?),
		function getShapeTypeColor( Uuid ) args(?),
		function destroyShape( Shape, Integer ) args(?),
		function getShapeTitle( Uuid ) args(?),
		function getShapeDescription( Uuid ) args(?),
		function getShapeIcon( Uuid ) args(?),
		function shapeExists( Shape ) args(?),
		function shapesInSphere( Vec3, [Number, String] ) args(?),
		function getNeighbours( Shape ) args(?),
		function getPipedNeighbours( Shape ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Shape, Shape ) args(?),
		[userdata] function getId( Shape ) args(?),
		[userdata] function getShapeUuid( Shape ) args(?),
		[userdata] function getColor( Shape ) args(?),
		[userdata] function setColor( Shape, Color ) args(?),
		[userdata] function getMass( Shape ) args(?),
		[userdata] function getBuoyancy( Shape ) args(?),
		[userdata] function getMaterial( Shape ) args(?),
		[userdata] function getWorldPosition( Shape ) args(?),
		[userdata] function getLocalPosition( Shape ) args(?),
		[userdata] function getVelocity( Shape ) args(?),
		[userdata] function getXAxis( Shape ) args(?),
		[userdata] function getYAxis( Shape ) args(?),
		[userdata] function getZAxis( Shape ) args(?),
		[userdata] function getAt( Shape ) args(?),
		[userdata] function getRight( Shape ) args(?),
		[userdata] function getUp( Shape ) args(?),
		[userdata] function transformPoint( Shape, Vec3 ) args(?),
		[userdata] function transformLocalPoint( Shape, Vec3 ) args(?),
		[userdata] function transformRotation( Shape, Quat ) args(?),
		[userdata] function getBoundingBox( Shape ) args(?),
		[userdata] function getBody( Shape ) args(?),
		[userdata] function getInteractable( Shape ) args(?),
		[userdata] function destroyPart( Shape, Integer ) args(?),
		[userdata] function getWorldRotation( Shape ) args(?),
		[userdata] function createJoint( Shape, Uuid, Vec3, Vec3 ) args(?),
		[userdata] function getMaterialId( Shape ) args(?),
		[userdata] function getIsHarvest( Uuid ) args(?),
		[userdata] function getIsStackable( Uuid ) args(?),
		[userdata] function destroyShape( Shape, Integer ) args(?),
		[userdata] function destroyBlock( Shape, Vec3, Vec3, Integer ) args(?),
		[userdata] function getClosestBlockLocalPosition( Shape, Vec3 ) args(?),
		[userdata] function shapeExists( Shape ) args(?),
		[userdata] function shapesInSphere( Vec3, [Number, String] ) args(?),
		[userdata] function getNeighbours( Shape ) args(?),
		[userdata] function getPipedNeighbours( Shape ) args(?),
		[userdata] function replaceShape( Shape, Uuid ) args(?)
	},
	body = {
		function getId( Body ) args(?),
		function getCreationId( Body ) args(?),
		function getMass( Body ) args(?),
		function getWorldPosition( Body ) args(?),
		function getVelocity( Body ) args(?),
		function getAngularVelocity( Body ) args(?),
		function getShapes( Body ) args(?),
		function getCreationShapes( Body ) args(?),
		function getCreationBodies( Body ) args(?),
		function getCreationsFromBodies( Table ) args(?),
		function hasChanged( Body, Integer ) args(?),
		function getAllBodies( --- ) args(?),
		function createBody( [Vec3, Body], [Quat, Uuid], [Vec3, Number], Vec3, Vec3, Number ) args(?),
		function getWorldRotation( Body ) args(?),
		function getCenterOfMassPosition( Body ) args(?),
		function isDynamic( Body ) args(?),
		function isStatic( Body ) args(?),
		function isOnLift( Body ) args(?),
		function isDestructable( Body ) args(?),
		function setDestructable( Body, Number ) args(?),
		function isBuildable( Body ) args(?),
		function setBuildable( Body, Number ) args(?),
		function isPaintable( Body ) args(?),
		function setPaintable( Body, Number ) args(?),
		function isConnectable( Body ) args(?),
		function setConnectable( Body, Number ) args(?),
		function isLiftable( Body ) args(?),
		function setLiftable( Body, Number ) args(?),
		function isUsable( Body ) args(?),
		function setUsable( Body, Number ) args(?),
		function isErasable( Body ) args(?),
		function setErasable( Body, Number ) args(?),
		function isConvertibleToDynamic( Body ) args(?),
		function setConvertibleToDynamic( Body, Number ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Body, Body ) args(?),
		[userdata] function getId( Body ) args(?),
		[userdata] function getCreationId( Body ) args(?),
		[userdata] function getMass( Body ) args(?),
		[userdata] function getWorldPosition( Body ) args(?),
		[userdata] function getVelocity( Body ) args(?),
		[userdata] function getAngularVelocity( Body ) args(?),
		[userdata] function getShapes( Body ) args(?),
		[userdata] function getCreationShapes( Body ) args(?),
		[userdata] function getCreationBodies( Body ) args(?),
		[userdata] function createPart( Body, Uuid, Vec3, Vec3, Vec3, Number ) args(?),
		[userdata] function createBlock( Body, [Uuid, Integer], Vec3, Vec3, Number ) args(?),
		[userdata] function hasChanged( Body, Integer ) args(?),
		[userdata] function isDynamic( Body ) args(?),
		[userdata] function isStatic( Body ) args(?),
		[userdata] function isOnLift( Body ) args(?),
		[userdata] function isDestructable( Body ) args(?),
		[userdata] function setDestructable( Body, Number ) args(?),
		[userdata] function isBuildable( Body ) args(?),
		[userdata] function setBuildable( Body, Number ) args(?),
		[userdata] function isPaintable( Body ) args(?),
		[userdata] function setPaintable( Body, Number ) args(?),
		[userdata] function isConnectable( Body ) args(?),
		[userdata] function setConnectable( Body, Number ) args(?),
		[userdata] function isLiftable( Body ) args(?),
		[userdata] function setLiftable( Body, Number ) args(?),
		[userdata] function isUsable( Body ) args(?),
		[userdata] function setUsable( Body, Number ) args(?),
		[userdata] function isErasable( Body ) args(?),
		[userdata] function setErasable( Body, Number ) args(?),
		[userdata] function isConvertibleToDynamic( Body ) args(?),
		[userdata] function setConvertibleToDynamic( Body, Number ) args(?),
		[userdata] function getAllSeatedCharacter( Body ) args(?),
		[userdata] function getCenterOfMassPosition( Body ) args(?),
		[userdata] function getWorld( Body ) args(?),
		[userdata] function getLocalAabb( Body ) args(?),
		[userdata] function getWorldAabb( Body ) args(?),
		[userdata] function transformPoint( Body, Vec3 ) args(?)
	},
	interactable = {
		function getId( Interactable ) args(?),
		function getType( Interactable ) args(?),
		function getColorNormal( Interactable ) args(?),
		function getColorHighlight( Interactable ) args(?),
		function getMaxParentCount( Interactable ) args(?),
		function getMaxChildCount( Interactable ) args(?),
		function isActive( Interactable ) args(?),
		function setActive( Interactable, Number ) args(?),
		function getPower( Interactable ) args(?),
		function setPower( Interactable, [Number, String] ) args(?),
		function getPublicData( Interactable ) args(?),
		function setPublicData( Interactable, Table ) args(?),
		function getShape( Interactable ) args(?),
		function getConnectionInputType( Interactable ) args(?),
		function getConnectionOutputType( Interactable ) args(?),
		function getBody( Interactable ) args(?),
		function getSingleParent( Interactable ) args(?),
		function getParents( Interactable, Integer ) args(?),
		function getChildren( Interactable, Integer ) args(?),
		function getJoints( Interactable ) args(?),
		function getBearings( Interactable ) args(?),
		function getPistons( Interactable ) args(?),
		function getPoseWeight( Interactable, Integer ) args(?),
		function setPoseWeight( Interactable, Integer, [Number, String] ) args(?),
		function getGlowMultiplier( Interactable ) args(?),
		function setGlowMultiplier( Interactable, [Number, String] ) args(?),
		function getUvFrameIndex( Interactable ) args(?),
		function setUvFrameIndex( Interactable, Integer ) args(?),
		function hasAnim( Interactable, String ) args(?),
		function setAnimProgress( Interactable, String, [Number, String] ) args(?),
		function setAnimEnabled( Interactable, String, Number ) args(?),
		function getAnimDuration( Interactable, String ) args(?),
		function getLocalBonePosition( Interactable, String ) args(?),
		function getWorldBonePosition( Interactable, String ) args(?),
		function getContainer( Interactable, Integer ) args(?),
		function connect( Interactable, Interactable ) args(?),
		function disconnect( Interactable, Interactable ) args(?),
		function addContainer( Interactable, Integer, Integer, Integer ) args(?),
		function removeContainer( Interactable, Integer ) args(?),
		function setParams( Interactable, [Table, String, Number] ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Interactable, Interactable ) args(?),
		[userdata] function getId( Interactable ) args(?),
		[userdata] function getType( Interactable ) args(?),
		[userdata] function getColorNormal( Interactable ) args(?),
		[userdata] function getColorHighlight( Interactable ) args(?),
		[userdata] function getMaxParentCount( Interactable ) args(?),
		[userdata] function getMaxChildCount( Interactable ) args(?),
		[userdata] function isActive( Interactable ) args(?),
		[userdata] function setActive( Interactable, Number ) args(?),
		[userdata] function getPower( Interactable ) args(?),
		[userdata] function setPower( Interactable, [Number, String] ) args(?),
		[userdata] function getPublicData( Interactable ) args(?),
		[userdata] function setPublicData( Interactable, Table ) args(?),
		[userdata] function hasOutputType( Interactable, Integer ) args(?),
		[userdata] function getShape( Interactable ) args(?),
		[userdata] function getConnectionInputType( Interactable ) args(?),
		[userdata] function getConnectionOutputType( Interactable ) args(?),
		[userdata] function getBody( Interactable ) args(?),
		[userdata] function getSingleParent( Interactable ) args(?),
		[userdata] function getParents( Interactable, Integer ) args(?),
		[userdata] function getChildren( Interactable, Integer ) args(?),
		[userdata] function getJoints( Interactable ) args(?),
		[userdata] function getBearings( Interactable ) args(?),
		[userdata] function getPistons( Interactable ) args(?),
		[userdata] function getPoseWeight( Interactable, Integer ) args(?),
		[userdata] function setPoseWeight( Interactable, Integer, [Number, String] ) args(?),
		[userdata] function getGlowMultiplier( Interactable ) args(?),
		[userdata] function setGlowMultiplier( Interactable, [Number, String] ) args(?),
		[userdata] function getUvFrameIndex( Interactable ) args(?),
		[userdata] function setUvFrameIndex( Interactable, Integer ) args(?),
		[userdata] function hasAnim( Interactable, String ) args(?),
		[userdata] function setAnimProgress( Interactable, String, [Number, String] ) args(?),
		[userdata] function setAnimEnabled( Interactable, String, Number ) args(?),
		[userdata] function getAnimDuration( Interactable, String ) args(?),
		[userdata] function getLocalBonePosition( Interactable, String ) args(?),
		[userdata] function getWorldBonePosition( Interactable, String ) args(?),
		[userdata] function getContainer( Interactable, Integer ) args(?),
		[userdata] function connect( Interactable, Interactable ) args(?),
		[userdata] function disconnect( Interactable, Interactable ) args(?),
		[userdata] function connectToJoint( Interactable, Joint ) args(?),
		[userdata] function addContainer( Interactable, Integer, Integer, Integer ) args(?),
		[userdata] function removeContainer( Interactable, Integer ) args(?),
		[userdata] function setParams( Interactable, [Table, String, Number] ) args(?),
		[userdata] function hasSeat( Interactable ) args(?),
		[userdata] function setSeatCharacter( Interactable, Character ) args(?),
		[userdata] function getSeatCharacter( Interactable ) args(?),
		[userdata] function getSeatInteractables( Interactable ) args(?),
		[userdata] function pressSeatInteractable( Interactable, Integer ) args(?),
		[userdata] function releaseSeatInteractable( Interactable, Integer ) args(?),
		[userdata] function hasSteering( Interactable ) args(?),
		[userdata] function setSteeringFlag( Interactable, Integer ) args(?),
		[userdata] function unsetSteeringFlag( Interactable, Integer ) args(?),
		[userdata] function getSteeringPower( Interactable ) args(?),
		[userdata] function getSteeringAngle( Interactable ) args(?),
		[userdata] function getSteeringJointLeftAngleSpeed( Interactable, Joint ) args(?),
		[userdata] function getSteeringJointRightAngleSpeed( Interactable, Joint ) args(?),
		[userdata] function getSteeringJointLeftAngleLimit( Interactable, Joint ) args(?),
		[userdata] function getSteeringJointRightAngleLimit( Interactable, Joint ) args(?),
		[userdata] function getSteeringJointUnlocked( Interactable, Joint ) args(?),
		[userdata] function getSteeringJointSettings( Interactable, Joint ) args(?),
		[userdata] function setSteeringJointLeftAngleSpeed( Interactable, Joint, [Number, String] ) args(?),
		[userdata] function setSteeringJointRightAngleSpeed( Interactable, Joint, [Number, String] ) args(?),
		[userdata] function setSteeringJointLeftAngleLimit( Interactable, Joint, [Number, String] ) args(?),
		[userdata] function setSteeringJointRightAngleLimit( Interactable, Joint, [Number, String] ) args(?),
		[userdata] function setSteeringJointUnlocked( Interactable, Joint, Number ) args(?),
		[userdata] function setSteeringJointSettings( Interactable, Joint, [Number, String], [Number, String], [Number, String], [Number, String], Number ) args(?),
		[userdata] function setSubMeshVisible( Interactable, String, Number ) args(?)
	},
	joint = {
		function createPart( Joint, Uuid, Vec3, Vec3, Vec3, Number ) args(?),
		function createBlock( Joint, Uuid, Vec3, Vec3, Number ) args(?),
		function getId( Joint ) args(?),
		function getType( Joint ) args(?),
		function getShapeA( Joint ) args(?),
		function getShapeB( Joint ) args(?),
		function getColor( Joint ) args(?),
		function getAngle( [Bearing, Joint] ) args(?),
		function getAngularVelocity( [Bearing, Joint] ) args(?),
		function getAppliedImpulse( [Bearing, Joint] ) args(?),
		function isReversed( [Bearing, Joint] ) args(?),
		function setMotorVelocity( [Bearing, Joint], [Number, String], [Number, String] ) args(?),
		function setTargetAngle( [Bearing, Joint], [Number, String], [Number, String], [Number, String] ) args(?),
		function getLength( [Piston, Joint] ) args(?),
		function setTargetLength( [Piston, Joint], [Number, String], [Number, String], [Number, String] ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Joint, Joint ) args(?),
		[userdata] function createPart( Joint, Uuid, Vec3, Vec3, Vec3, Number ) args(?),
		[userdata] function createBlock( Joint, Uuid, Vec3, Vec3, Number ) args(?),
		[userdata] function getId( Joint ) args(?),
		[userdata] function getType( Joint ) args(?),
		[userdata] function getShapeA( Joint ) args(?),
		[userdata] function getShapeB( Joint ) args(?),
		[userdata] function getColor( Joint ) args(?),
		[userdata] function getAngle( [Bearing, Joint] ) args(?),
		[userdata] function getAngularVelocity( [Bearing, Joint] ) args(?),
		[userdata] function getAppliedImpulse( [Bearing, Joint] ) args(?),
		[userdata] function isReversed( [Bearing, Joint] ) args(?),
		[userdata] function setMotorVelocity( [Bearing, Joint], [Number, String], [Number, String] ) args(?),
		[userdata] function setTargetAngle( [Bearing, Joint], [Number, String], [Number, String], [Number, String] ) args(?),
		[userdata] function getLength( [Piston, Joint] ) args(?),
		[userdata] function setTargetLength( [Piston, Joint], [Number, String], [Number, String], [Number, String] ) args(?)
	},
	container = {
		function beginTransaction( --- ) args(?),
		function endTransaction( --- ) args(?),
		function abortTransaction( --- ) args(?),
		function getSize( Container ) args(?),
		function getMaxStackSize( Container ) args(?),
		function setItem( Container, Integer, Uuid, Integer, Integer ) args(?),
		function getItem( Container, Integer ) args(?),
		function getFirstItem( Container ) args(?),
		function hasChanged( Container, Integer ) args(?),
		function isEmpty( Container ) args(?),
		function getId( Container ) args(?),
		function quantity( Container ) args(?),
		function totalQuantity( Container, Uuid ) args(?),
		function itemUuid( Container ) args(?),
		function swap( Container, Integer, Container, Integer ) args(?),
		function spendFromSlot( Container, Integer, Uuid, Integer, Number ) args(?),
		function spend( Container, Uuid, Integer, Number ) args(?),
		function collectToSlot( Container, Integer, Uuid, Integer, Number ) args(?),
		function collect( Container, Uuid, Integer, Number ) args(?),
		function canCollect( Container, Uuid, Integer ) args(?),
		function canSpend( Container, Uuid, Integer ) args(?),
		function moveAll( Container, Container ) args(?),
		function setFilters( Container, Table ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Container, Container ) args(?),
		[userdata] function getSize( Container ) args(?),
		[userdata] function getMaxStackSize( Container ) args(?),
		[userdata] function setItem( Container, Integer, Uuid, Integer, Integer ) args(?),
		[userdata] function getItem( Container, Integer ) args(?),
		[userdata] function hasChanged( Container, Integer ) args(?),
		[userdata] function isEmpty( Container ) args(?),
		[userdata] function setAllowCollect( Container, Number ) args(?),
		[userdata] function getAllowCollect( Container ) args(?),
		[userdata] function setAllowSpend( Container, Number ) args(?),
		[userdata] function getAllowSpend( Container ) args(?),
		[userdata] function canCollect( Container, Uuid, Integer ) args(?),
		[userdata] function canSpend( Container, Uuid, Integer ) args(?),
		[userdata] function setFilters( Container, Table ) args(?)
	},
	quest = {
		function addQuest( Uuid ) args(?),
		function getQuest( Uuid ) args(?),
		function getQuestById( Integer ) args(?),
		function getActiveQuests( --- ) args(?),
		function removeQuest( Quest ) args(?),
		function completeQuest( Quest ) args(?),
		function getIsRepeatable( Uuid ) args(?),
		function getHasCompleted( Uuid ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Quest, Quest ) args(?),
		[userdata] function getUuid( Quest ) args(?),
		[userdata] function getObjectives( Quest ) args(?),
		[userdata] function getRewards( Quest ) args(?),
		[userdata] function getDescription( Quest ) args(?),
		[userdata] function remove( Quest ) args(?),
		[userdata] function complete( Quest ) args(?)
	},
	harvestable = {
		function getId( Harvestable ) args(?),
		function getType( Harvestable ) args(?),
		function getName( Harvestable ) args(?),
		function getMaterial( Harvestable ) args(?),
		function getMaterialId( Harvestable ) args(?),
		function destroy( Harvestable ) args(?),
		function create( Uuid, Vec3, Quat, Vec3 ) args(?),
		function getPosition( Harvestable ) args(?),
		function getRotation( Harvestable ) args(?),
		function getPoseWeight( Harvestable, Integer ) args(?),
		function setPoseWeight( Harvestable, Integer, [Number, String] ) args(?),
		function getColor( Harvestable ) args(?),
		function setColor( Harvestable, Color ) args(?),
		function getUvFrameIndex( Harvestable ) args(?),
		function setUvFrameIndex( Harvestable, Integer ) args(?),
		function setParams( Harvestable, [Table, String, Number] ) args(?),
		function getPublicData( Harvestable ) args(?),
		function setPublicData( Harvestable, Table ) args(?),
		function getClientPublicData( Harvestable ) args(?),
		function setClientPublicData( Harvestable, Table ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Harvestable, Harvestable ) args(?),
		[userdata] function getId( Harvestable ) args(?),
		[userdata] function getType( Harvestable ) args(?),
		[userdata] function getName( Harvestable ) args(?),
		[userdata] function getMaterial( Harvestable ) args(?),
		[userdata] function getMaterialId( Harvestable ) args(?),
		[userdata] function destroy( Harvestable ) args(?),
		[userdata] function getPosition( Harvestable ) args(?),
		[userdata] function setPosition( Harvestable, Vec3 ) args(?),
		[userdata] function getRotation( Harvestable ) args(?),
		[userdata] function setRotation( Harvestable, Quat ) args(?),
		[userdata] function getPoseWeight( Harvestable, Integer ) args(?),
		[userdata] function setPoseWeight( Harvestable, Integer, [Number, String] ) args(?),
		[userdata] function getColor( Harvestable ) args(?),
		[userdata] function setColor( Harvestable, Color ) args(?),
		[userdata] function getUvFrameIndex( Harvestable ) args(?),
		[userdata] function setUvFrameIndex( Harvestable, Integer ) args(?),
		[userdata] function setParams( Harvestable, [Table, String, Number] ) args(?),
		[userdata] function getUuid( Harvestable ) args(?),
		[userdata] function getAabb( Harvestable, [Table, String, Number] ) args(?),
		[userdata] function getData( Harvestable ) args(?),
		[userdata] function getPublicData( Harvestable ) args(?),
		[userdata] function setPublicData( Harvestable, Table ) args(?),
		[userdata] function getClientPublicData( Harvestable ) args(?),
		[userdata] function setClientPublicData( Harvestable, Table ) args(?)
	},
	character = {
		function createCharacter( ---, World, Vec3, [Number, String], [Number, String], Character ) args(?),
		function preloadRenderables( Table ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Character, Character ) args(?),
		[userdata] function getId( Character ) args(?),
		[userdata] function getWorldPosition( Character ) args(?),
		[userdata] function getVelocity( Character ) args(?),
		[userdata] function getDirection( Character ) args(?),
		[userdata] function getMass( Character ) args(?),
		[userdata] function getHeight( Character ) args(?),
		[userdata] function getPlayer( Character ) args(?),
		[userdata] function getUnit( Character ) args(?),
		[userdata] function getWorld( Character ) args(?),
		[userdata] function isPlayer( Character ) args(?),
		[userdata] function getRadius( Character ) args(?),
		[userdata] function isDefaultColor( Character ) args(?),
		[userdata] function setColor( Character, Color ) args(?),
		[userdata] function getColor( Character ) args(?),
		[userdata] function getGlowMultiplier( Character ) args(?),
		[userdata] function setGlowMultiplier( Character, [Number, String] ) args(?),
		[userdata] function bindAnimationCallback( Character, String, [Number, String], String ) args(?),
		[userdata] function removeAnimationCallbacks( Character ) args(?),
		[userdata] function addRenderable( Character, String ) args(?),
		[userdata] function removeRenderable( Character, String ) args(?),
		[userdata] function getAnimationInfo( Character, String ) args(?),
		[userdata] function updateAnimation( Character, String, [Number, String], [Number, String], Number ) args(?),
		[userdata] function setMovementWeights( Character, [Number, String], [Number, String] ) args(?),
		[userdata] function setAllowTumbleAnimations( Character, Number ) args(?),
		[userdata] function setDowned( Character, Number ) args(?),
		[userdata] function isDowned( Character ) args(?),
		[userdata] function setSwimming( Character, Number ) args(?),
		[userdata] function isSwimming( Character ) args(?),
		[userdata] function setDiving( Character, Number ) args(?),
		[userdata] function isDiving( Character ) args(?),
		[userdata] function setTumbling( Character, Number ) args(?),
		[userdata] function isTumbling( Character ) args(?),
		[userdata] function applyTumblingImpulse( Character, Vec3 ) args(?),
		[userdata] function getTumblingWorldPosition( Character ) args(?),
		[userdata] function getTumblingWorldRotation( Character ) args(?),
		[userdata] function getTumblingExtent( Character ) args(?),
		[userdata] function getTumblingLinearVelocity( Character ) args(?),
		[userdata] function getCanSwim( Character ) args(?),
		[userdata] function getActiveAnimations( Character ) args(?),
		[userdata] function getTpBonePos( Character, String ) args(?),
		[userdata] function getTpBoneRot( Character, String ) args(?),
		[userdata] function setMovementEffects( Character, String ) args(?),
		[userdata] function setMovementSpeedFraction( Character, [Number, String] ) args(?),
		[userdata] function getMovementSpeedFraction( Character ) args(?),
		[userdata] function setLockingInteractable( Character, Interactable ) args(?),
		[userdata] function getLockingInteractable( Character ) args(?),
		[userdata] function getCurrentMovementNoiseRadius( Character ) args(?),
		[userdata] function isSprinting( Character ) args(?),
		[userdata] function isAiming( Character ) args(?),
		[userdata] function isCrouching( Character ) args(?),
		[userdata] function getCurrentMovementSpeed( Character ) args(?),
		[userdata] function isOnGround( Character ) args(?),
		[userdata] function getCharacterType( Character ) args(?)
	},
	player = {
		function getAllPlayers( --- ) args(?),
		function placeLift( ---, Table, Vec3, Integer, Integer ) args(?),
		function removeLift( --- ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Player, Player ) args(?),
		[userdata] function getId( Player ) args(?),
		[userdata] function getCharacter( --- ) args(?),
		[userdata] function setCharacter( ---, Character ) args(?),
		[userdata] function getName( --- ) args(?),
		[userdata] function getInventory( --- ) args(?),
		[userdata] function getHotbar( --- ) args(?),
		[userdata] function placeLift( ---, Table, Vec3, Integer, Integer ) args(?),
		[userdata] function removeLift( --- ) args(?),
		[userdata] function sendCharacterEvent( ---, String ) args(?),
		[userdata] function isMale( --- ) args(?),
		[userdata] function getCarryColor( --- ) args(?),
		[userdata] function getCarry( --- ) args(?)
	},
	unit = {
		function createUnit( Uuid, Vec3, [Number, String], [Table, String, Number] ) args(?),
		function getAllUnits( --- ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Unit, Unit ) args(?),
		[userdata] function destroy( --- ) args(?),
		[userdata] function getId( Unit ) args(?),
		[userdata] function setWhiskerData( ---, Integer, [Number, String], [Number, String], [Number, String] ) args(?),
		[userdata] function setHearingData( ---, [Number, String] ) args(?),
		[userdata] function createState( ---, String ) args(?),
		[userdata] function setMovementDirection( ---, Vec3 ) args(?),
		[userdata] function setFacingDirection( ---, Vec3 ) args(?),
		[userdata] function setMovementType( ---, String ) args(?),
		[userdata] function setWantsJump( ---, Number ) args(?),
		[userdata] function getCurrentMovementDirection( --- ) args(?),
		[userdata] function getCurrentFacingDirection( --- ) args(?),
		[userdata] function sendCharacterEvent( ---, String ) args(?),
		[userdata] function getCharacter( --- ) args(?)
	},
	aiState = {
		function __newindex( AiState, String ) args(?),
		function __index( AiState, String ) args(?),
		function __eq( AiState, AiState ) args(?),
		function __gc( --- ) args(?),
		[userdata] function start( AiState ) args(?),
		[userdata] function stop( AiState ) args(?),
		[userdata] function onFixedUpdate( AiState, [Number, String] ) args(?),
		[userdata] function onUnitUpdate( AiState, [Number, String] ) args(?),
		[userdata] function isDone( AiState ) args(?),
		[userdata] function getMovementDirection( AiState ) args(?),
		[userdata] function getFacingDirection( AiState ) args(?),
		[userdata] function getMovementType( AiState ) args(?),
		[userdata] function getWantsJump( AiState ) args(?)
	},
	areaTrigger = {
		function createBox( Vec3, Vec3, Quat, Integer, [Table, String, Number] ) args(?),
		function createBoxWater( Vec3, Vec3, Quat, Integer, [Table, String, Number] ) args(?),
		function createAttachedBox( Interactable, Vec3, Vec3, Quat, Integer, [Table, String, Number] ) args(?),
		function destroy( AreaTrigger ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( AreaTrigger, AreaTrigger ) args(?),
		function __gc( AreaTrigger ) args(?),
		[userdata] function getId( AreaTrigger ) args(?),
		[userdata] function bindOnEnter( AreaTrigger, String ) args(?),
		[userdata] function bindOnExit( AreaTrigger, String ) args(?),
		[userdata] function bindOnStay( AreaTrigger, String ) args(?),
		[userdata] function bindOnProjectile( AreaTrigger, String ) args(?),
		[userdata] function getContents( AreaTrigger ) args(?),
		[userdata] function getWorldMin( AreaTrigger ) args(?),
		[userdata] function getWorldMax( AreaTrigger ) args(?),
		[userdata] function getWorldPosition( AreaTrigger ) args(?),
		[userdata] function setWorldPosition( AreaTrigger, Vec3 ) args(?),
		[userdata] function setSize( AreaTrigger, Vec3 ) args(?),
		[userdata] function getSize( AreaTrigger ) args(?),
		[userdata] function getHostInteractable( AreaTrigger ) args(?),
		[userdata] function getUserData( AreaTrigger ) args(?)
	},
	portal = {
		function createPortal( Vec3 ) args(?),
		function destroy( Portal ) args(?),
		function addWorldPortalHook( World, String, Portal ) args(?),
		function popWorldPortalHook( String ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Portal, Portal ) args(?),
		[userdata] function getId( Portal ) args(?),
		[userdata] function hasOpeningA( Portal ) args(?),
		[userdata] function hasOpeningB( Portal ) args(?),
		[userdata] function setOpeningA( Portal, Vec3, Quat ) args(?),
		[userdata] function setOpeningB( Portal, Vec3, Quat ) args(?),
		[userdata] function getPositionA( Portal ) args(?),
		[userdata] function getPositionB( Portal ) args(?),
		[userdata] function getRotationA( Portal ) args(?),
		[userdata] function getRotationB( Portal ) args(?),
		[userdata] function getWorldA( Portal ) args(?),
		[userdata] function getWorldB( Portal ) args(?),
		[userdata] function getContentsA( Portal ) args(?),
		[userdata] function getContentsB( Portal ) args(?),
		[userdata] function transferAToB( Portal ) args(?),
		[userdata] function transferBToA( Portal ) args(?)
	},
	lift = {
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Lift, Lift ) args(?),
		[userdata] function getId( Lift ) args(?),
		[userdata] function getWorldPosition( --- ) args(?),
		[userdata] function getLevel( --- ) args(?),
		[userdata] function hasBodies( --- ) args(?)
	},
	vec3 = {
		function new( [Number, String], [Number, String], [Number, String] ) args(?),
		function zero( --- ) args(?),
		function one( --- ) args(?),
		function getX( Vec3 ) args(?),
		function setX( Vec3, [Number, String] ) args(?),
		function getY( Vec3 ) args(?),
		function setY( Vec3, [Number, String] ) args(?),
		function getZ( Vec3 ) args(?),
		function setZ( Vec3, [Number, String] ) args(?),
		function normalize( Vec3 ) args(?),
		function dot( Vec3, Vec3 ) args(?),
		function cross( Vec3, Vec3 ) args(?),
		function length( Vec3 ) args(?),
		function length2( Vec3 ) args(?),
		function lerp( Vec3, Vec3, [Number, String] ) args(?),
		function bezier2( Vec3, Vec3, Vec3, [Number, String] ) args(?),
		function bezier3( Vec3, Vec3, Vec3, Vec3, [Number, String] ) args(?),
		function rotateX( Vec3, [Number, String] ) args(?),
		function rotateY( Vec3, [Number, String] ) args(?),
		function rotateZ( Vec3, [Number, String] ) args(?),
		function rotate( Vec3, [Number, String], Vec3 ) args(?),
		function getRotation( Vec3, Vec3 ) args(?),
		function closestAxis( Vec3 ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __unm( Vec3, Vec3 ) args(?),
		function __add( Vec3, Vec3 ) args(?),
		function __sub( Vec3, Vec3 ) args(?),
		function __div( Vec3, [Vec3, Number, String] ) args(?),
		function __mul( Vec3, [Vec3, Number, String] ) args(?),
		function __lt( Vec3, Vec3 ) args(?),
		function __eq( Vec3, Vec3 ) args(?),
		function __tostring( Vec3 ) args(?),
		[userdata] function normalize( Vec3 ) args(?),
		[userdata] function dot( Vec3, Vec3 ) args(?),
		[userdata] function cross( Vec3, Vec3 ) args(?),
		[userdata] function length( Vec3 ) args(?),
		[userdata] function length2( Vec3 ) args(?),
		[userdata] function rotateX( Vec3, [Number, String] ) args(?),
		[userdata] function rotateY( Vec3, [Number, String] ) args(?),
		[userdata] function rotateZ( Vec3, [Number, String] ) args(?),
		[userdata] function rotate( Vec3, [Number, String], Vec3 ) args(?)
	},
	quat = {
		function new( [Number, String], [Number, String], [Number, String], [Number, String] ) args(?),
		function identity( --- ) args(?),
		function angleAxis( [Number, String], Vec3 ) args(?),
		function getX( Quat ) args(?),
		function setX( Quat, [Number, String] ) args(?),
		function getY( Quat ) args(?),
		function setY( Quat, [Number, String] ) args(?),
		function getZ( Quat ) args(?),
		function setZ( Quat, [Number, String] ) args(?),
		function getW( Quat ) args(?),
		function setW( Quat, [Number, String] ) args(?),
		function round90( Quat ) args(?),
		function lookRotation( Vec3, Vec3 ) args(?),
		function slerp( Quat, Quat, [Number, String] ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __mul( Quat, [Quat, Vec3] ) args(?),
		function __eq( Quat, Quat ) args(?)
	},
	uuid = {
		function new( String ) args(?),
		function getNil( --- ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __tostring( Uuid ) args(?),
		function __eq( Uuid, Uuid ) args(?)
	},
	color = {
		function new( [Integer, String, Number], [Number, String], [Number, String], [Number, String] ) args(?),
		function getR( Color ) args(?),
		function getG( Color ) args(?),
		function getB( Color ) args(?),
		function getA( Color ) args(?),
		function setR( Color, [Number, String] ) args(?),
		function setG( Color, [Number, String] ) args(?),
		function setB( Color, [Number, String] ) args(?),
		function setA( Color, [Number, String] ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __add( Color, Color ) args(?),
		function __sub( Color, Color ) args(?),
		function __div( Color, [Color, Number, String] ) args(?),
		function __mul( Color, [Color, Number, String] ) args(?),
		function __eq( Color, Color ) args(?),
		function __tostring( Color ) args(?),
		[userdata] function getHexStr( Color ) args(?)
	},
	raycastResult = {
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		[userdata] function getBody( RaycastResult ) args(?),
		[userdata] function getShape( RaycastResult ) args(?),
		[userdata] function getCharacter( RaycastResult ) args(?),
		[userdata] function getJoint( RaycastResult ) args(?),
		[userdata] function getLiftData( --- ) args(?),
		[userdata] function getHarvestable( RaycastResult ) args(?),
		[userdata] function getAreaTrigger( RaycastResult ) args(?)
	},
	pathfinder = {
		function getPath( Character, Vec3, Number, Table ) args(?),
		function getSortedNodes( Vec3, [Number, String], [Number, String] ) args(?)
	},
	pathNode = {
		function createPathNode( Vec3, [Number, String] ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( PathNode, PathNode ) args(?),
		[userdata] function destroy( --- ) args(?),
		[userdata] function connect( ---, ---, Table, Table, [Number, String] ) args(?),
		[userdata] function getPosition( --- ) args(?)
	},
	gui = {
		widget = {
			function getId( --- ) args(?),
			function getName( --- ) args(?),
			function getTypeName( --- ) args(?),
			function getPosition( --- ) args(?),
			function setPosition( --- ) args(?),
			function getVisible( --- ) args(?),
			function setVisible( --- ) args(?),
			function getSize( --- ) args(?),
			function setSize( --- ) args(?),
			function getText( --- ) args(?),
			function setText( --- ) args(?),
			function destroy( --- ) args(?),
			function find( --- ) args(?),
			function bindOnClick( --- ) args(?),
			function __newindex( ---, String ) args(?),
			function __index( ---, String ) args(?),
			function __eq( Widget, Widget ) args(?),
			[userdata] function find( --- ) args(?),
			[userdata] function getName( --- ) args(?),
			[userdata] function getTypeName( --- ) args(?),
			[userdata] function getPosition( --- ) args(?),
			[userdata] function setPosition( --- ) args(?),
			[userdata] function getVisible( --- ) args(?),
			[userdata] function setVisible( --- ) args(?),
			[userdata] function getSize( --- ) args(?),
			[userdata] function setSize( --- ) args(?),
			[userdata] function getText( --- ) args(?),
			[userdata] function setText( --- ) args(?),
			[userdata] function bindOnClick( --- ) args(?)
		},
		interface = {
			function __newindex( ---, String ) args(?),
			function __index( ---, String ) args(?),
			function __eq( GuiInterface, GuiInterface ) args(?),
			function __gc( GuiInterface ) args(?),
			[userdata] function destroy( GuiInterface ) args(?),
			[userdata] function open( GuiInterface ) args(?),
			[userdata] function close( GuiInterface ) args(?),
			[userdata] function isActive( GuiInterface ) args(?),
			[userdata] function setText( GuiInterface, String, String ) args(?),
			[userdata] function setVisible( GuiInterface, String, Number ) args(?),
			[userdata] function setColor( GuiInterface, String, Color ) args(?),
			[userdata] function setImage( GuiInterface, String, String ) args(?),
			[userdata] function setItemIcon( GuiInterface, String, String, String, String ) args(?),
			[userdata] function setIconImage( GuiInterface, String, Uuid ) args(?),
			[userdata] function setButtonState( GuiInterface, String, Number ) args(?),
			[userdata] function setSliderRange( GuiInterface, String, Integer ) args(?),
			[userdata] function setSliderPosition( GuiInterface, String, Integer ) args(?),
			[userdata] function setSliderRangeLimit( GuiInterface, String, Integer ) args(?),
			[userdata] function setSliderData( GuiInterface, String, Integer, Integer ) args(?),
			[userdata] function clearList( GuiInterface, String ) args(?),
			[userdata] function addListItem( GuiInterface, String, String, [Number, String] ) args(?),
			[userdata] function setSelectedListItem( GuiInterface, String, String ) args(?),
			[userdata] function clearGrid( GuiInterface, String ) args(?),
			[userdata] function addGridItemsFromFile( GuiInterface, String, String, [Number, String] ) args(?),
			[userdata] function addGridItem( GuiInterface, String, [Number, String] ) args(?),
			[userdata] function setGridItem( GuiInterface, String, Integer, [Number, String] ) args(?),
			[userdata] function setGridSize( GuiInterface, String, Integer ) args(?),
			[userdata] function setContainer( GuiInterface, String, Container ) args(?),
			[userdata] function setContainers( GuiInterface, String, Table ) args(?),
			[userdata] function setData( GuiInterface, String, [Number, String] ) args(?),
			[userdata] function setHost( GuiInterface, [Character, Shape], String ) args(?),
			[userdata] function setWorldPosition( GuiInterface, Vec3, World ) args(?),
			[userdata] function setMaxRenderDistance( GuiInterface, [Number, String] ) args(?),
			[userdata] function setFadeRange( GuiInterface, [Number, String] ) args(?),
			[userdata] function setRequireLineOfSight( GuiInterface, Number ) args(?),
			[userdata] function setOnCloseCallback( GuiInterface, String ) args(?),
			[userdata] function setButtonCallback( GuiInterface, String, String ) args(?),
			[userdata] function setSliderCallback( GuiInterface, String, String ) args(?),
			[userdata] function setGridButtonCallback( GuiInterface, String, String ) args(?),
			[userdata] function setGridItemChangedCallback( GuiInterface, String, String ) args(?),
			[userdata] function setListSelectionCallback( GuiInterface, String, String ) args(?)
		},
		function createWidget( --- ) args(?),
		function getScreenSize( --- ) args(?),
		function createGuiFromLayout( String, Number ) args(?),
		function createContainerGui( Number ) args(?),
		function createWorkbenchGui( Number ) args(?),
		function createCookBotGui( Number ) args(?),
		function createCraftBotGui( Number ) args(?),
		function createMechanicStationGui( Number ) args(?),
		function createSurvivalHudGui( Number ) args(?),
		function createHideoutGui( Number ) args(?),
		function createDressBotGui( Number ) args(?),
		function createEngineGui( Number ) args(?),
		function createSeatGui( Number ) args(?),
		function createNameTagGui( Number ) args(?),
		function createBagIconGui( Number ) args(?),
		function createBeaconIconGui( Number ) args(?),
		function createWaypointIconGui( Number ) args(?),
		function createAmmunitionContainerGui( Number ) args(?),
		function createBatteryContainerGui( Number ) args(?),
		function createChemicalContainerGui( Number ) args(?),
		function createFertilizerContainerGui( Number ) args(?),
		function createGasContainerGui( Number ) args(?),
		function createSeedContainerGui( Number ) args(?),
		function createWaterContainerGui( Number ) args(?),
		function createSeatUpgradeGui( Number ) args(?),
		function createSteeringBearingGui( Number ) args(?),
		function startFadeToBlack( [Number, String], [Number, String] ) args(?),
		function endFadeToBlack( [Number, String] ) args(?),
		function createChallengeHUDGui( Number ) args(?),
		function createChallengeMessageGui( Number ) args(?),
		function createLogbookGui( Number ) args(?),
		function displayAlertText( String, [Number, String] ) args(?),
		function hideGui( Number ) args(?),
		function getKeyBinding( String ) args(?),
		function setInteractionText( --- ) args(?),
		function setCenterIcon( String ) args(?),
		function setProgressFraction( [Number, String] ) args(?),
		function createCharacterCustomizationGui( Number ) args(?),
		function setCharacterDebugText( Character, String, Number ) args(?),
		function exitToMenu( --- ) args(?),
		function chatMessage( String ) args(?)
	},
	audio = {
		function play( String, Vec3 ) args(?)
	},
	particle = {
		function createParticle( String, Vec3, Quat, Color ) args(?)
	},
	tool = {
		function checkLiftCollision( Table, Vec3, Integer ) args(?),
		function preloadRenderables( Table ) args(?),
		function forceTool( Tool ) args(?),
		function uuidExists( Uuid ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		[userdata] function getId( Tool ) args(?),
		[userdata] function getOwner( Tool ) args(?),
		[userdata] function updateAnimation( Tool, String, [Number, String], [Number, String] ) args(?),
		[userdata] function setMovementAnimation( Tool, String, String ) args(?),
		[userdata] function updateMovementAnimation( Tool, [Number, String], [Number, String] ) args(?),
		[userdata] function getAnimationInfo( Tool, String ) args(?),
		[userdata] function updateJoint( Tool, String, Vec3, [Number, String] ) args(?),
		[userdata] function updateCamera( Tool, [Number, String], [Number, String], Vec3, [Number, String] ) args(?),
		[userdata] function setTpRenderables( Tool, Table ) args(?),
		[userdata] function setTpColor( Tool, Color ) args(?),
		[userdata] function updateFpAnimation( Tool, String, [Number, String], [Number, String], Number ) args(?),
		[userdata] function getFpAnimationInfo( Tool, String ) args(?),
		[userdata] function setFpRenderables( Tool, Table ) args(?),
		[userdata] function setFpColor( Tool, Color ) args(?),
		[userdata] function updateFpCamera( Tool, [Number, String], Vec3, [Number, String], [Number, String] ) args(?),
		[userdata] function isCrouching( Tool ) args(?),
		[userdata] function isSprinting( Tool ) args(?),
		[userdata] function isOnGround( Tool ) args(?),
		[userdata] function setBlockSprint( Tool, Number ) args(?),
		[userdata] function setMovementSlowDown( Tool, Number ) args(?),
		[userdata] function isLocal( Tool ) args(?),
		[userdata] function isInFirstPersonView( Tool ) args(?),
		[userdata] function isEquipped( Tool ) args(?),
		[userdata] function setDispersionFraction( Tool, [Number, String] ) args(?),
		[userdata] function setCrossHairAlpha( Tool, [Number, String] ) args(?),
		[userdata] function setInteractionTextSuppressed( Tool, Number ) args(?),
		[userdata] function getPosition( Tool ) args(?),
		[userdata] function getDirection( Tool ) args(?),
		[userdata] function getMovementVelocity( Tool ) args(?),
		[userdata] function getRelativeMoveDirection( Tool ) args(?),
		[userdata] function getMovementSpeedFraction( Tool ) args(?),
		[userdata] function getCameraWeights( Tool ) args(?),
		[userdata] function getTpBonePos( Tool, String ) args(?),
		[userdata] function getTpBoneDir( Tool, String ) args(?),
		[userdata] function getFpBonePos( Tool, String ) args(?)
	},
	localPlayer = {
		function getPlayer( --- ) args(?),
		function getId( --- ) args(?),
		function getPosition( --- ) args(?),
		function getDirection( --- ) args(?),
		function getRight( --- ) args(?),
		function getUp( --- ) args(?),
		function getRaycastStart( --- ) args(?),
		function getRaycast( [Number, String], Vec3, Vec3 ) args(?),
		function isInFirstPersonView( --- ) args(?),
		function getFpBonePos( String ) args(?),
		function getActiveItem( --- ) args(?),
		function getSelectedHotbarSlot( --- ) args(?),
		function getCarryColor( --- ) args(?),
		function getCarry( --- ) args(?),
		function getInventory( --- ) args(?),
		function getHotbar( --- ) args(?),
		function setDirection( Vec3 ) args(?),
		function getFpAnimationInfo( String ) args(?),
		function updateFpAnimation( String, [Number, String], [Number, String], Number ) args(?),
		function addRenderable( String ) args(?),
		function removeRenderable( String ) args(?),
		function setBlockSprinting( Number ) args(?),
		function setLockedControls( Number ) args(?)
	},
	effect = {
		function playEffect( String, Vec3, Vec3, Quat, Vec3, Table ) args(?),
		function playHostedEffect( String, ---, String, Table ) args(?),
		function createEffect( String, [Character, Interactable], String ) args(?),
		function createEffect2D( String ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Effect, Effect ) args(?),
		function __gc( Effect ) args(?),
		[userdata] function getId( Effect ) args(?),
		[userdata] function start( Effect ) args(?),
		[userdata] function stop( Effect ) args(?),
		[userdata] function stopImmediate( Effect ) args(?),
		[userdata] function destroy( Effect ) args(?),
		[userdata] function isPlaying( Effect ) args(?),
		[userdata] function setPosition( Effect, Vec3 ) args(?),
		[userdata] function setScale( Effect, Vec3 ) args(?),
		[userdata] function setVelocity( Effect, Vec3 ) args(?),
		[userdata] function setRotation( Effect, Quat ) args(?),
		[userdata] function setOffsetPosition( Effect, Vec3 ) args(?),
		[userdata] function setOffsetRotation( Effect, Quat ) args(?),
		[userdata] function setParameter( Effect, String, [Number, String, Vec3, Quat, Color, Uuid] ) args(?)
	},
	render = {
		function setOutdoorLighting( [Number, String] ) args(?),
		function getOutdoorLighting( --- ) args(?),
		function getScreenCoordinatesFromWorldPosition( Vec3, Integer, Integer ) args(?)
	},
	camera = {
		function setPosition( Vec3 ) args(?),
		function getPosition( --- ) args(?),
		function getDefaultPosition( --- ) args(?),
		function setDirection( Vec3 ) args(?),
		function getDirection( --- ) args(?),
		function getUp( --- ) args(?),
		function getRight( --- ) args(?),
		function getFov( --- ) args(?),
		function setShake( [Number, String] ) args(?),
		function setCameraState( Integer ) args(?),
		function getCameraState( --- ) args(?),
		function setCameraPullback( Integer, Integer ) args(?),
		function cameraSphereCast( [Number, String], Vec3, Vec3 ) args(?)
	},
	visualization = {
		function setCreationBodies( Table ) args(?),
		function setCreationVisible( Number ) args(?),
		function setCreationValid( Number ) args(?),
		function setCreationFreePlacement( Number ) args(?),
		function setCreationFreePlacementPosition( Vec3 ) args(?),
		function setCreationFreePlacementRotation( Integer ) args(?),
		function setLiftPosition( Vec3 ) args(?),
		function setLiftLevel( Integer ) args(?),
		function setLiftVisible( Number ) args(?),
		function setLiftValid( Number ) args(?),
		function setBlockVisualization( Vec3, Number, [Joint, Shape] ) args(?),
		function createBlueprint( String ) args(?),
		function __newindex( ---, String ) args(?),
		function __index( ---, String ) args(?),
		function __eq( Blueprint, Blueprint ) args(?),
		function __gc( --- ) args(?),
		[userdata] function setPosition( Blueprint, Vec3 ) args(?),
		[userdata] function destroy( Blueprint ) args(?)
	},
	terrainTile = {
		function getHeightAt( Integer, Integer, Integer, Integer, Integer, Integer ) args(?),
		function getColorAt( Integer, Integer, Integer, Integer, Integer, Integer ) args(?),
		function getMaterialAt( Integer, Integer, Integer, Integer, Integer, Integer ) args(?),
		function getClutterIdxAt( Integer, Integer, Integer, Integer, Integer ) args(?),
		function getAssetsForCell( Integer, Integer, Integer, Integer ) args(?),
		function getHarvestablesForCell( Integer, Integer, Integer, Integer ) args(?),
		function getCreationsForCell( Integer, Integer, Integer ) args(?),
		function getNodesForCell( Integer, Integer, Integer ) args(?),
		function getPrefabsForCell( Integer, Integer, Integer ) args(?),
		function getDecalsForCell( Integer, Integer, Integer ) args(?),
		function getSize( String ) args(?),
		function getTileUuid( String ) args(?),
		function getCreatorId( String ) args(?),
		function getContentFromPrefab( --- ) args(?)
	},
	terrainGeneration = {
		function saveGameStorage( [Table, String, Number], [Table, String, Number] ) args(?),
		function loadGameStorage( [Table, String, Number] ) args(?)
	}
}